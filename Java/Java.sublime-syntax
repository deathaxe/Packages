%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# https://docs.oracle.com/javase/specs/jls/se13/html/index.html
name: Java
file_extensions:
  - java
  - bsh
scope: source.java

variables:
  # Reserved keywords
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.9
  reserved_words: |-
    (?x:
      {{keywords}} |
      {{storage_types}} |
      {{storage_modifiers}} |
      {{constants}} |
      {{variables}}
    )
  keywords: |-
    (?x:
      {{declaration_keywords}} |
      {{control_keywords}} |
      {{operator_keywords}} |
      {{illegal_keywords}}
    )
  declaration_keywords: |-
    (?:class|enum|interface|var|void|extends|implements|import|package)
  control_keywords: |-
    (?x:
      assert|break|case|catch|continue|do|else|finally|for|if|return|switch|
      throw|throws|try|while
    )
  operator_keywords: (?:new|instanceof)
  illegal_keywords: (?:const|goto)

  # Storage Modifiers
  storage_modifiers: (?:{{class_modifier}}|{{class_no_modifier}})
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.1
  class_modifier: (?:public|protected|private|abstract|static|final|strictfp)
  class_no_modifier: (?:native|synchronized|transient|default|volatile)
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-9.1.1
  interface_modifier: (?:public|protected|private|abstract|static|strictfp)
  interface_no_modifier: (?:final|native|synchronized|transient|default|volatile)

  # Storage Types
  storage_types: (?:boolean|byte|char|short|int|float|long|double)

  # Literals
  constants: (?:false|null|true)
  variables: (?:_|super|this)

  # Identifiers
  id: (?:[\p{L}_$][\p{L}\p{N}_$]*)
  classcase_id: (?:\p{Lu}[\p{L}\p{N}_$]*)
  lowercase_id: (?:[_$]*\p{Ll}[\p{Ll}\p{N}_$]*\b)
  uppercase_id: (?:[_$]*\p{Lu}[\p{Lu}\p{N}_$]*\b)

  # One dot is mandatory to not compete with other regexes that match an id.
  before_fqn: (?={{lowercase_id}}\s*\.)

  # digits
  bin_digit: '[01_]'
  oct_digit: '[0-7_]'
  dec_digit: '[\d_]'
  hex_digit: '[\h_]'
  dec_exponent: '[eE][-+]?{{dec_digit}}*'
  hex_exponent: '[pP][-+]?{{dec_digit}}*'

contexts:
  main:
    - include: prototype
    - include: package
    - include: import
    - include: module
    - include: class
    - include: enum
    - include: interface
    - include: annotation
    - include: code
    - include: stray-braces

  code:
    - include: code-block
    - include: parens-or-lambda
    - include: constants
    - include: numbers
    - include: strings
    - include: instantiation
    - include: keywords
    - include: labels
    - include: uppercase-identifiers
    - include: storage-modifiers
    - include: primitive-types
    - include: object-types
    - include: punctuations
    - include: operators
    - include: variables

###[ PROTOTYPES ]##############################################################

  prototype:
    - match: (?=%>)
      pop: true
    - include: comments
    - include: illegal-keywords

  any_POP:
    - match: (?=\S)
      pop: true

  any_POP2:
    - match: (?=\S)
      pop: 2

  immediate_POP:
    - match: ''
      pop: true

  immidiate_POP3:
    - match: (?=\S)
      pop: 3

  reserved-pop:
    - match: (?={{reserved_words}}\b)
      pop: true

###[ ILLEGALS ]################################################################

  illegal-array-modifier:
    - match: \[\s*\]
      scope: invalid.illegal.unexpected-modifier.java
    - include: annotation
    - include: any_POP

  illegal-keywords:
    - match: '{{illegal_keywords}}\b'
      scope: invalid.illegal.keyword.java

  illegal-newline:
    - match: \n
      scope: invalid.illegal.unexpected-newline.java
      pop: true

  illegal-open-block:
    - match: \s?(?={)
      scope: invalid.illegal.stray-terminator-end
      pop: true

  illegal-semicolon:
    - match: ;
      scope: invalid.illegal.stray-terminator-end
      pop: true

  illegal-parens-terminators:
    # Pops the stack if anything matches
    - include: illegal-semicolon
    - include: illegal-open-block

  stray-braces:
    - match: \}
      scope: invalid.illegal.stray-brace-end

  stray-parens:
    - match: \)
      scope: invalid.illegal.stray-parens-end

###[ COMMENTS ]################################################################

  comments:
    - match: /\*\*/
      scope: comment.block.empty.java punctuation.definition.comment.java
    - include: scope:text.html.javadoc
    - match: /\*
      scope: punctuation.definition.comment.begin.java
      push:
        - meta_scope: comment.block.java
        - match: \*/
          scope: punctuation.definition.comment.end.java
          pop: true
    - match: //
      scope: punctuation.definition.comment.java
      push:
        - meta_scope: comment.line.double-slash.java
        - match: \n
          pop: true
        - match: (?=%>)
          pop: true

###[ PACKAGE ]#################################################################

  package:
    - match: package\b
      scope: 
        meta.namespace.package.java
        storage.type.namespace.package.java
        keyword.declaration.namespace.package.java
      push: [package-identifier, any_POP]

  package-identifier:
    - meta_content_scope: meta.namespace.package.identifier.java
    - include: entity-package
    - include: immediate_POP

###[ MODULE ]##################################################################

  module:
    - match: (?:(open)\s+)?(module)\b
      scope: meta.namespace.module.java
      captures:
        1: storage.modifier.java
        2: storage.type.namespace.module.java
           keyword.declaration.namespace.module.java
      push: [module-body-block, module-identifier, any_POP]

  module-identifier:
    - include: entity-module
    - include: immediate_POP

  module-body-block:
    - meta_content_scope: meta.namespace.module.identifier.java
    - match: (?=\{)
      set: [module-body-common, block-begin]
    - include: any_POP

  module-body-common:
    - meta_scope: meta.namespace.module.body.java meta.block.java
    - include: block-end
    - include: punctuation-terminator-semicolon
    - match: exports\b
      scope: keyword.other.module.exports.java
      push: [module-exports-meta, module-exports-or-opens-body]
    - match: opens\b
      scope: keyword.other.module.opens.java
      push: [module-opens-meta, module-exports-or-opens-body]
    - match: requires\b
      scope: keyword.other.module.requires.java
      push: module-requires-body
    - match: uses\b
      scope: keyword.other.module.uses.java
      push: [module-uses-meta, module-provides-or-uses-body]
    - match: provides\b
      scope: keyword.other.module.provides.java
      push: [module-provides-meta, module-provides-or-uses-body]

  module-exports-meta:
    - meta_scope: meta.exports.java
    - include: immediate_POP

  module-opens-meta:
    - meta_scope: meta.opens.java
    - include: immediate_POP

  module-exports-or-opens-body:
    - include: module-statement-terminator
    - match: to\b
      scope: keyword.other.module.to.java
      set:
        - include: module-statement-terminator
        - include: punctuation-separator-comma
        - include: entity-module
    - include: entity-package

  module-requires-body:
    - meta_scope: meta.requires.java
    - match: transitive\b
      scope: keyword.other.module.transitive.java
    - include: module-statement-terminator
    - include: entity-module

  module-uses-meta:
    - meta_scope: meta.uses.java
    - include: immediate_POP

  module-provides-meta:
    - meta_scope: meta.provides.java
    - include: immediate_POP

  module-provides-or-uses-body:
    - include: module-statement-terminator
    - match: with\b
      scope: keyword.other.module.with.java
      set:
        - include: module-statement-terminator
        - include: punctuation-separator-comma
        - include: entity-class
    - include: entity-class

  module-statement-terminator:
    - match: (?=[;}]|(?:exports|opens|requires|provides|uses)\b)
      pop: true

###[ IMPORT ]##################################################################

  import:
    - match: import\b
      scope: keyword.control.import.java
      push: import-modifier

  import-modifier:
    - meta_scope: meta.import.java
    - match: static\b
      scope: storage.modifier.java
      set:
        - meta_content_scope: meta.import.java
        - match: (?=\S)
          set: import-static-namespace
    - match: (?=\S)
      set: import-normal-namespace

  import-normal-namespace:
    - meta_content_scope: meta.import.java meta.path.java
    - include: import-terminator
    - include: import-package-name
    - match: (?=\S)
      set: import-normal-class

  import-normal-class:
    - meta_content_scope: meta.import.java meta.path.java
    - include: import-terminator
    - include: import-class-name
    - include: import-wildcard
    - include: any_POP

  import-static-namespace:
    - meta_content_scope: meta.import.java meta.path.java
    - include: import-terminator
    - include: import-package-name
    - match: (?=\S)
      set: import-static-class

  import-static-class:
    - meta_content_scope: meta.import.java meta.path.java
    - include: import-terminator
    - include: import-constant-name
    - include: import-class-name
    - include: import-function-name
    - include: import-wildcard
    - include: any_POP

  import-constant-name:
    - match: '{{uppercase_id}}\b(?!\s*\.)'
      scope: entity.name.constant.java
      set: import-expect-terminator

  import-package-name:
    - match: '{{lowercase_id}}'
      scope: variable.namespace.java
      push: import-acessor-or-termintor
    - include: punctuation-accessor-dot

  import-class-name:
    - match: '{{classcase_id}}'
      scope: entity.name.class.java
      push: import-acessor-or-termintor
    - include: punctuation-accessor-dot

  import-function-name:
    - match: '{{id}}'
      scope: entity.name.function.java
      set: import-expect-terminator

  import-wildcard:
    - match: \*
      scope: keyword.operator.wildcard.asterisk.java
      set: import-expect-terminator

  import-acessor-or-termintor:
    # continue with the import context
    - match: \.
      scope: punctuation.accessor.dot.java
      pop: 1
    # pop the import context
    - match: (?=\s*;|\S)
      pop: 2

  import-expect-terminator:
    - include: import-terminator
    - match: \S
      scope: invalid.illegal.expect-semicolon.java

  import-terminator:
    - match: (?=\s*;|{{reserved_words}}\b)
      pop: 1

###[ ANNOTATIONS ]#############################################################

  annotation:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.7
    - match: \@
      scope: punctuation.definition.annotation.java
      push: [annotation-parameters, annotation-qualified-name]

  annotation-qualified-name:
    - match: '{{before_fqn}}'
      set:
        - meta_scope: meta.path.java
        - match: '{{lowercase_id}}'
          scope: variable.annotation.package.java
        - include: punctuation-accessor-dot
        - include: annotation-unqualified-name
    - include: annotation-unqualified-name

  annotation-unqualified-name:
    - match: '{{classcase_id}}'
      scope: variable.annotation.java
      set: annotation-nested-name
    - include: any_POP

  annotation-nested-name:
    - match: \.
      scope: punctuation.accessor.dot.java
      set: annotation-unqualified-name
    - include: any_POP

  annotation-parameters:
    - meta_scope: meta.annotation.identifier.java
    - match: (?=\()
      set: [annotation-parameters-common, parens-begin]
    - include: any_POP

  annotation-parameters-common:
    - meta_scope: meta.annotation.parameters.java meta.parens.java
    - include: parens-end
    - match: (?={{id}})
      branch_point: annotation-parameter
      branch:
        - - match: '{{id}}'
            scope: variable.parameter.java
            push:
              - match: =
                scope: keyword.operator.assignment.java
                pop: 2
              - match: (?=\S)
                fail: annotation-parameter
        - - include: code
          - include: immediate_POP
    - match: \{
      scope: punctuation.section.braces.begin.java
      push: array-initialization-common
    - include: annotation
    - include: code

###[ CLASSES ]#################################################################

  class:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1
    - match: (?=({{storage_modifiers}}\s+)*class\b)
      push:
        - meta_scope: meta.class.java
        - match: class\b
          scope:
            storage.type.class.java
            keyword.declaration.class.java
          set:
            - class-body-block
            - class-extends
            - class-name-meta
            - generic-type-parameters
            - class-name
        - match: '{{class_modifier}}\b'
          scope: storage.modifier.java
        - match: '{{class_no_modifier}}\b'
          scope: invalid.illegal.unexpected-modifier.java
        - include: any_POP

  class-name:
    - include: reserved-pop
    - match: '{{id}}'
      scope: entity.name.class.java
      pop: true
    - include: any_POP

  class-name-meta:
    - meta_content_scope: meta.class.identifier.java
    - include: any_POP

  class-extends:
    - match: extends\b
      scope: keyword.declaration.extends.java
      push:
        - - meta_scope: meta.class.extends.java
          - match: \,
            scope: punctuation.separator.comma.java
            push: inherited-object-type-reference
          - include: any_POP
        - inherited-object-type-reference
    - match: implements\b
      scope: keyword.declaration.implements.java
      push:
        - - meta_scope: meta.class.implements.java
          - match: \,
            scope: punctuation.separator.comma.java
            push: inherited-object-type-reference
          - include: any_POP
        - inherited-object-type-reference
    - include: any_POP

  class-body-block:
    - match: (?=\{)
      set: [class-body-block-common, block-begin]
    - include: any_POP

  class-body-block-common:
    - meta_scope: meta.class.body.java meta.block.java
    - include: block-end
    - include: class-body

  class-body:
    - include: class
    - include: enum
    - include: interface
    - include: annotation
    - include: fields-and-methods
    - include: static-code-block
    - include: code

###[ ENUMS ]###################################################################

  enum:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.9
    - match: (?=({{storage_modifiers}}\s+)*enum\b)
      push:
        - meta_scope: meta.enum.java
        - match: enum\b
          scope:
            storage.type.enum.java
            keyword.declaration.enum.java
          set:
            - enum-body-block
            - enum-extends
            - enum-name-meta
            - enum-type-parameters
            - enum-name
        - match: '{{class_modifier}}\b'
          scope: storage.modifier.java
        - match: '{{class_no_modifier}}\b'
          scope: invalid.illegal.unexpected-modifier.java
        - include: any_POP

  enum-name:
    - include: reserved-pop
    - match: '{{id}}'
      scope: entity.name.enum.java
      pop: true
    - include: any_POP

  enum-type-parameters:
    - match: \<
      set:
        - meta_scope: invalid.illegal.unexpected-type-parameters.java
        - match: \>
          pop: true
    - include: any_POP

  enum-name-meta:
    - meta_content_scope: meta.enum.identifier.java
    - include: any_POP

  enum-extends:
    - match: extends\b
      scope: invalid.illegal.unexpected-extends.java
      push:
        - - meta_scope: meta.enum.extends.java
          - match: \,
            scope: punctuation.separator.comma.java
            push: inherited-object-type-reference
          - include: any_POP
        - inherited-object-type-reference
    - match: implements\b
      scope: keyword.declaration.implements.java
      push:
        - - meta_scope: meta.enum.implements.java
          - match: \,
            scope: punctuation.separator.comma.java
            push: inherited-object-type-reference
          - include: any_POP
        - inherited-object-type-reference
    - include: any_POP

  enum-body-block:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.9.1
    - match: (?=\{)
      set: [enum-body-block-common, enum-constants-list, block-begin]
    - include: any_POP

  enum-body-block-common:
    - meta_scope: meta.enum.body.java meta.block.java
    - include: block-end
    - include: class-body

  enum-constants-list:
    - meta_content_scope: meta.sequence.constants.java
    - include: reserved-pop
    - match: '{{id}}'
      scope: entity.name.constant.java
      push: enum-constant-arguments
    - include: punctuation-separator-comma
    - include: any_POP

  enum-constant-arguments:
    - meta_scope: meta.constant.identifier.java
    - match: (?=\()
      set: [enum-constant-body-block, enum-constant-arguments-common, parens-begin]
    - include: enum-constant-body-block

  enum-constant-arguments-common:
    - clear_scopes: 1
    - meta_scope: meta.constant.arguments.java meta.parens.java
    - include: parens-common

  enum-constant-body-block:
    - meta_scope: meta.constant.java
    - match: (?=\{)
      set: [enum-constant-body-block-common, block-begin]
    - include: any_POP

  enum-constant-body-block-common:
    - meta_scope: meta.constant.body.java meta.block.java
    - include: block-end
    - include: class-body

###[ INTERFACES ]##############################################################

  interface:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.1
    - match: (?=({{storage_modifiers}}\s+)*@?interface\b)
      push:
        - meta_scope: meta.interface.java
        - match: (@?)interface\b
          scope:
            storage.type.interface.java
            keyword.declaration.interface.java
          set:
            - interface-body-block
            - interface-extends
            - interface-name-meta
            - generic-type-parameters
            - interface-name
        - match: '{{interface_modifier}}\b'
          scope: storage.modifier.java
        - match: '{{interface_no_modifier}}\b'
          scope: invalid.illegal.unexpected-modifier.java
        - include: any_POP

  interface-name:
    - include: reserved-pop
    - match: '{{id}}'
      scope: entity.name.interface.java
      pop: true
    - include: any_POP

  interface-name-meta:
    - meta_content_scope: meta.interface.identifier.java
    - include: any_POP

  interface-extends:
    - match: extends\b
      scope: keyword.declaration.extends.java
      push:
        - - meta_scope: meta.interface.extends.java
          - match: \,
            scope: punctuation.separator.comma.java
            push: inherited-object-type-reference
          - include: any_POP
        - inherited-object-type-reference
    - match: implements\b
      scope: keyword.declaration.implements.java
      push:
        - - meta_scope: meta.interface.implements.java
          - match: \,
            scope: punctuation.separator.comma.java
            push: inherited-object-type-reference
          - include: any_POP
        - inherited-object-type-reference
    - include: any_POP

  interface-body-block:
    - match: (?=\{)
      set: [interface-body-block-common, block-begin]
    - include: any_POP

  interface-body-block-common:
    - meta_scope: meta.interface.body.java meta.block.java
    - include: block-end
    - include: class-body

###[ FIELDS AND METHODS ]######################################################

  fields-and-methods:
    - match: <
      scope: punctuation.definition.generic.begin.java
      push: 
        - generic-type-parameters-common
        - generic-type-parameter
    - match: void\b
      scope: meta.method.return-type.java storage.type.void.java
      push: 
        - method-body-block
        - method-attributes
        - method-parameters
        - method-name
    - match: (?={{id}}\s*\()
      push: 
        - method-body-block
        - method-attributes
        - method-parameters
        - method-name
    - match: '{{before_fqn}}'
      push: 
        - field-or-method
        - after-object-and-array-types
        - array-modifier
        - generic-type-arguments
        - object-type-fqn
    - match: '{{classcase_id}}'
      scope: support.class.java
      push: 
        - field-or-method
        - after-object-and-array-types
        - array-modifier
        - generic-type-arguments
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      push: [field-or-method, array-modifier]

  field-or-method:
    - match: (?={{id}}\s*\()
      set: 
        - method-body-block
        - method-attributes
        - method-parameters
        - method-name
    - match: (?=\S)
      set: field-name

  field-name:
    - include: field-terminator
    - match: '{{uppercase_id}}'
      scope: entity.name.constant.java
      push: [field-meta, field-value, array-modifier]
    - match: '{{id}}'
      scope: variable.other.member.java
      push: [field-meta, field-value, array-modifier]
    - include: punctuation-separator-comma
    - include: any_POP

  field-meta:
    - meta_scope: meta.field.java
    - include: immediate_POP

  field-value:
    - match: =
      scope: keyword.operator.assignment.java
      set:
        - meta_scope: meta.assignment.rhs.java
        - match: (?=[,;}])
          pop: true
        - include: field-terminator
        - include: code
        - include: stray-parens
    - include: any_POP

  field-terminator:
    # Prevent style from being removed from whole file when making a new expression
    - match: (?=(?:{{storage_modifiers}}|{{storage_types}}|void)\b)
      pop: true

  method-name:
    - match: '{{classcase_id}}'
      scope: entity.name.function.constructor.java
      pop: true
    - match: '{{id}}'
      scope: entity.name.function.java
      pop: true
    - include: any_POP

  method-parameters:
    - meta_content_scope: meta.method.identifier.java
    - match: (?=\()
      set: 
        - method-parameters-common
        - parameter-identifier
        - parameter-variadic
        - parameter-type
        - parameter-modifier
        - parens-begin
    - include: any_POP

  method-parameters-common:
    - meta_scope: meta.method.parameters.java meta.parens.java
    - include: parameters-list
    - include: parens-end
    - match: \S
      scope: invalid.illegal.missing-parameter-end
      pop: true

  method-attributes:
    - match: ''
      set:
        - meta_scope: meta.method.java
        - match: default\b
          scope: keyword.declaration.default.java
          set:
            - clear_scopes: 1
            - meta_scope: meta.method.default.java
            - match: (?=[;}])
              pop: true
            - include: code
        - match: throws\b
          scope: keyword.declaration.throws.java
          push:
          - - clear_scopes: 1
            - meta_scope: meta.method.throws.java
            - match: \,
              scope: punctuation.separator.comma.java
              push: object-type-reference
            - include: any_POP
          - object-type-reference
        - include: any_POP

  method-body-block:
    - match: (?=\{)
      set: [method-body-common, block-begin]
    - include: any_POP

  method-body-common:
    - meta_scope: meta.method.body.java meta.block.java
    - include: block-end
    - include: code-block-body

###[ VAR DECLARATION ]#########################################################

  var-declaration:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.4
    - match: var\b
      scope: storage.type.var.java
      push:
        - var-expect-terminator
        - var-value
        - var-variable-name
        - illegal-array-modifier

  var-variable-name:
    - include: var-terminator
    - match: '{{uppercase_id}}'
      scope: entity.name.constant.java
      set: illegal-array-modifier
    - match: '{{id}}'
      scope: variable.other.readwrite.java
      set: illegal-array-modifier
    - include: any_POP

  var-value:
    - match: =
      scope: keyword.operator.assignment.java
      set:
        - meta_scope: meta.assignment.rhs.java
        - include: var-terminator
        - include: code
    - include: any_POP

  var-expect-terminator:
    - match: ','
      scope: invalid.illegal.expect-terminator.java
      pop: true
    - include: var-terminator

  var-terminator:
    - match: (?=\s*[,:;)}\]]|{{reserved_words}}\b)
      pop: true

###[ CODE BLOCKS ]#############################################################

  block-begin:
    - match: \{
      scope: punctuation.section.block.begin.java
      pop: true

  block-end:
    - match: \}
      scope: punctuation.section.block.end.java
      pop: true

  static-code-block:
    - match: \{
      scope: punctuation.section.block.begin.java
      push: static-code-block-common

  static-code-block-common:
    - meta_scope: meta.static.body.java meta.block.java
    - include: block-end
    - include: code-block-body

  code-block:
    - match: \{
      scope: punctuation.section.block.begin.java
      push: code-block-common

  code-block-common:
    - meta_scope: meta.block.java
    - include: block-end
    - include: code-block-body

  code-block-body:
    - include: var-declaration
    - include: annotation
    - include: code
    - include: stray-parens

###[ INSTANTIATION ]###########################################################

  instantiation:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.9
    - match: new\b
      scope: keyword.other.storage.new.java
      push:
        - instantiation-meta
        - instantiation-type
        - generic-type-arguments

  instantiation-meta:
    - meta_scope: meta.instantiation.java
    - include: immediate_POP

  instantiation-type:
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      set: array-dimensions
    - match: '{{before_fqn}}'
      set: [after-object-type-in-instantiation, object-type-fqn]
    - include: instantiation-type-identifier

  instantiation-type-identifier:
    - match: '{{classcase_id}}'
      scope: support.class.java
      set: after-object-type-in-instantiation
    - include: annotation
    - include: any_POP

  after-object-type-in-instantiation:
    - match: <>
      scope: punctuation.definition.generic.diamond.java
      set: constructor-arguments
    - match: <
      scope: punctuation.definition.generic.begin.java
      set: 
        - instantiation-array-or-object
        - generic-type-arguments-common
        - generic-type-argument
    - match: \.
      scope: punctuation.accessor.dot.java
      set: instantiation-type-identifier
    - include: instantiation-array-or-object

  instantiation-array-or-object:
    - include: array-dimensions
    - include: constructor-arguments
    - include: any_POP

  constructor-arguments:
    - match: \(
      scope: punctuation.section.parens.begin.java
      set:
        - meta_scope: meta.parens.java
        - match: \)
          scope: punctuation.section.parens.end.java
          set: class-body-block
        - include: illegal-parens-terminators
        - include: code

  array-dimensions:
    - match: \[
      scope: punctuation.section.brackets.begin.java
      set:
        - meta_scope: meta.brackets.java
        - match: \]
          scope: punctuation.section.brackets.end.java
          set:
            - include: array-dimensions
            - include: any_POP
        - include: code
    - include: array-initialization
    - include: annotation

  array-initialization:
    - match: \{
      scope: punctuation.section.braces.begin.java
      set: array-initialization-common

  array-initialization-common:
    - meta_scope: meta.braces.java
    - match: \}
      scope: punctuation.section.braces.end.java
      pop: true
    - match: \{
      scope: punctuation.section.braces.begin.java
      push: array-initialization-common
    - include: annotation
    - include: code

###[ LAMBDAS AND PARENS ]######################################################

  parens-or-lambda:
    - match: \(
      scope: punctuation.section.parens.begin.java
      branch_point: lambda-or-parens
      branch:
        - parens-with-expressions
        - parens-with-lambda-parameters
    - match: ->
      scope:
        meta.function.anonymous.java
        storage.type.function.anonymous.java
      push:
        - meta_content_scope: meta.function.anonymous.body.java
        - match: (?=[,;)}\]])
          pop: true
        - include: code

  parens-with-expressions:
    - meta_scope: meta.parens.java
    - match: \)
      scope: meta.parens.java punctuation.section.parens.end.java
      push:
        - clear_scopes: 1
        - match: (?=->)
          fail: lambda-or-parens
        - include: any_POP2
    - include: parens-body

  parens-with-lambda-parameters:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.27
    - meta_scope: meta.function.anonymous.parameters.java meta.parens.java
    - match: ''
      set:
        - lambda-parameters-common
        - parameter-identifier
        - parameter-variadic
        - parameter-type
        - parameter-modifier

  lambda-parameters-common:
    - meta_scope: meta.function.anonymous.parameters.java meta.parens.java
    - include: parameters-list
    - match: \)
      scope: punctuation.section.parens.end.java
      set:
        - meta_content_scope: meta.function.anonymous.java
        - include: any_POP
    - match: \S
      scope: invalid.illegal.missing-parameter-end
      pop: true

  parens-common:
    - include: parens-end
    - include: parens-body

  parens-body:
    - include: illegal-parens-terminators
    - include: code

  parens-begin:
    - match: \(
      scope: punctuation.section.parens.begin.java
      pop: true

  parens-end:
    - match: \)
      scope: punctuation.section.parens.end.java
      pop: true

  declaration-statement-parens:
    - match: \(
      scope: punctuation.section.parens.begin.java
      set:
        - meta_scope: meta.parens.java
        - include: parens-end
        - include: illegal-open-block
        - include: code-block-body
        - match: ':'
          scope: keyword.operator.assignment.java
    - include: any_POP

  method-call-arguments:
    - meta_scope: meta.function-call.arguments.java meta.parens.java
    - include: parens-common

###[ PARAMETERS ]##############################################################

  parameters-list:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.4.1
    - match: \,
      scope: punctuation.separator.comma.java
      push:
        - parameter-identifier
        - parameter-variadic
        - parameter-type
        - parameter-modifier

  parameter-modifier:
    - match: final\b
      scope: storage.modifier.java
    - match: (?:{{storage_modifiers}}|var)\b
      scope: invalid.illegal.unexpected-keyword.java
    - include: annotation
    - include: any_POP

  parameter-type:
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      set: array-modifier
    - match: var\b
      scope: invalid.illegal.unexpected-keyword.java
      set: array-modifier
    - include: object-and-array-types

  parameter-variadic:
    - match: \.\.\.
      scope: keyword.operator.variadic.java
      pop: true
    - include: annotation
    - include: any_POP

  parameter-identifier:
    - match: '{{id}}'
      scope: variable.parameter.java
      set: array-modifier
    - include: any_POP

###[ VARIABLES ]###############################################################

  variables:
    - match: _\b
      scope: variable.language.blank.java
    - match: '{{variables}}\b'
      scope: variable.language.java
    - match: '{{id}}'
      branch_point: variables-type
      branch:
        - variable-maybe-method-name
        - variable-maybe-lambda-parameter
        - variable-other

  variables-branch-success:
    - match: ''
      pop: 2

  variable-maybe-method-name:
    - meta_scope:
        meta.function-call.identifier.java
        variable.function.java
    - match: ''
      push:
        - clear_scopes: 1
        - meta_scope: meta.function-call.identifier.java
        - match: (?=\()
          set: [variables-branch-success, method-call-arguments, parens-begin]
        - match: (?=\S)
          fail: variables-type

  variable-maybe-lambda-parameter:
    - meta_scope:
        meta.function.anonymous.parameters.java
        variable.parameter.java
    - match: ''
      push:
        - clear_scopes: 1
        - meta_content_scope: meta.function.anonymous.java
        - match: (?=->)
          pop: 2
        - match: (?=\S)
          fail: variables-type

  variable-other:
    - meta_scope:
        meta.variable.identifier.java
        variable.other.readwrite.java
    - match: ''
      set: variable-maybe-item-access

  variable-maybe-item-access:
    - meta_content_scope: meta.variable.item-access.java
    - match: \[
      scope: punctuation.section.brackets.begin.java
      push:
        - meta_scope: meta.brackets.java
        - match: \]
          scope: punctuation.section.brackets.end.java
          pop: true
        - include: illegal-parens-terminators
        - include: code
    - match: (?!\s*\[)
      pop: true

  variable-namespace:
    - match: '{{lowercase_id}}'
      scope: variable.namespace.java
    - include: punctuation-accessor-dot

  variable-language-class:
    - match: class\b
      scope: variable.language.class.java
      pop: true

  variable-maybe-function-reference:
    - match: '{{id}}'
      scope: variable.function.reference.java
      pop: true
    - include: any_POP

  variable-maybe-label:
    - match: '{{id}}'
      scope: variable.label.java
      pop: true
    - include: any_POP

###[ CONSTANTS ]###############################################################

  constants:
    - match: (?:false|true)\b
      scope: constant.language.boolean.java
    - match: null\b
      scope: constant.language.null.java

  labels:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.7
    - match: ^\s*({{id}})(:)(?!:)
      captures:
        1: entity.name.label.java
        2: punctuation.separator.colon.java

  numbers:
    # hexadecimal floats
    - match: |-
        (?x)
        (0[xX])
        (?:
          # 0x1., 0x1.1, 0x1.1p1, 0x1.1p-1, 0x1.p1, 0x1.p-1 | 0x1p1
          ({{hex_digit}}*) (?: ((\.) {{hex_digit}}*) ({{hex_exponent}})? | ({{hex_exponent}}) )
          # 0x.1, 0x.1p1, 0x.1p-1
          | ((\.) {{hex_digit}}+) ({{hex_exponent}})?
        )
      captures:
        1: meta.number.base.java constant.numeric.float.hexadecimal.java
        2: meta.number.value.mantissa.java constant.numeric.float.hexadecimal.java
        3: meta.number.value.mantissa.java constant.numeric.float.hexadecimal.java
        4: punctuation.separator.decimal.java
        5: meta.number.value.exponent.java constant.numeric.float.hexadecimal.java
        6: meta.number.value.exponent.java constant.numeric.float.hexadecimal.java
        7: meta.number.value.mantissa.java constant.numeric.float.hexadecimal.java
        8: punctuation.separator.decimal.java
        9: meta.number.value.exponent.java constant.numeric.float.hexadecimal.java
    # decimal floats
    - match: |-
        (?x)
        ([0-9]{{dec_digit}}*)
        (?:
          # 1., 1.1, 1.1e1, 1.1e-1, 1.e1, 1.e-1, 1.d, 1.1d, 1.1e1d, 1.1e-1d, 1.e1d, 1.e-1d
          ((\.) {{dec_digit}}*) ({{dec_exponent}})? ([dDfF]\b)?
          # 1e1 1e1d
          | ({{dec_exponent}}) ([dDfF]\b)?
          # 1d
          | ([dDfF]\b)
        )
        | ((\.) {{dec_digit}}+) ({{dec_exponent}})? ([dDfF]\b)?
      captures:
        1: meta.number.value.mantissa.java constant.numeric.float.decimal.java
        2: meta.number.value.mantissa.java constant.numeric.float.decimal.java 
        3: punctuation.separator.decimal.java
        4: meta.number.value.exponent.java constant.numeric.float.decimal.java
        5: meta.number.type.java constant.numeric.float.decimal.java
        6: meta.number.value.exponent.java constant.numeric.float.decimal.java
        7: meta.number.type.java constant.numeric.float.decimal.java
        8: meta.number.type.java constant.numeric.float.decimal.java
        9: meta.number.value.mantissa.java constant.numeric.float.decimal.java
        10: punctuation.separator.decimal.java
        11: meta.number.value.exponent.java constant.numeric.float.decimal.java
        12: meta.number.type.java constant.numeric.float.decimal.java
    # binary integers
    - match: (0[bB])({{bin_digit}}*)([lL]\b)?
      captures:
        1: meta.number.base.java constant.numeric.integer.binary.java
        2: meta.number.value.java constant.numeric.integer.binary.java
        3: meta.number.type.java constant.numeric.integer.binary.java
    # hexadecimal integers
    - match: (0[xX])({{hex_digit}}*)([lL]\b)?
      captures:
        1: meta.number.base.java constant.numeric.integer.hexadecimal.java
        2: meta.number.value.java constant.numeric.integer.hexadecimal.java
        3: meta.number.type.java constant.numeric.integer.hexadecimal.java
    # octal integers
    - match: (0)({{oct_digit}}+)([lL]\b|(?![\d_]))
      captures:
        1: meta.number.base.java constant.numeric.integer.octal.java
        2: meta.number.value.java constant.numeric.integer.octal.java
        3: meta.number.type.java constant.numeric.integer.octal.java
    # decimal integers
    - match: ((0_*)?[1-9]{{dec_digit}}*|0(?![\d_]))([lL]\b)?
      captures:
        1: meta.number.value.java constant.numeric.integer.decimal.java
        2: invalid.illegal.numeric.java
        3: meta.number.type.java constant.numeric.integer.decimal.java

  strings:
    # https://docs.oracle.com/en/java/javase/13/text_blocks/index.html
    - match: (\"{3})(.*)$
      captures:
        1: punctuation.definition.string.begin.java
        2: invalid.illegal.unexpected-content.java
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.triple.java
        - match: \"{3}
          scope: punctuation.definition.string.end.java
          pop: true
        - include: string-escapes
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.5
    - match: \"
      scope: punctuation.definition.string.begin.java
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.java
        - match: \"
          scope: punctuation.definition.string.end.java
          pop: true
        - include: illegal-newline
        - include: string-escapes
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.4
    - match: \'
      scope: punctuation.definition.string.begin.java
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.java
        - match: \'
          scope: punctuation.definition.string.end.java
          pop: true
        - include: illegal-newline
        - include: string-escapes

  string-escapes:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.3
    - match: \\u+\h{4}
      scope: constant.character.escape.unicode.java
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.6
    - match: \\[0-3]?[0-7]{1,2}
      scope: constant.character.escape.octal.java
    - match: \\[btnfr"'\\]
      scope: constant.character.escape.java
    - match: \\.
      scope: invalid.illegal.escape.java

###[ KEYWORDS ]################################################################

  keywords:
    # exceptions
    - match: catch\b
      scope: keyword.control.exception.catch.java
      push: catch-statement-body
    - match: finally\b
      scope: keyword.control.exception.finally.java
    - match: try\b
      scope: keyword.control.exception.try.java
      push: declaration-statement-parens
    # flow
    - match: assert\b
      scope: keyword.control.flow.assert.java
      push: assert-statement-body
    - match: break\b
      scope: keyword.control.flow.break.java
      push: variable-maybe-label
    - match: continue\b
      scope: keyword.control.flow.continue.java
      push: variable-maybe-label
    - match: return\b
      scope: keyword.control.flow.return.java
    - match: throw\b
      scope: keyword.control.flow.throw.java
    # conditional
    - match: if\b
      scope: keyword.control.conditional.if.java
    - match: else\b
      scope: keyword.control.conditional.else.java
    - match: switch\b
      scope: keyword.control.conditional.switch.java
    - match: case\b
      scope: keyword.control.conditional.case.java
    - match: default\b
      scope: keyword.control.conditional.default.java
    # loop
    - match: do\b
      scope: keyword.control.loop.do-while.java
    - match: for\b
      scope: keyword.control.loop.for.java
      push: declaration-statement-parens
    - match: while\b
      scope: keyword.control.loop.while.java
    # operator
    - match: instanceof\b
      scope: keyword.other.storage.instanceof.java

  assert-statement-body:
    - meta_scope: meta.assertion.java
    - match: (?=;)
      pop: true
    - match: ':'
      scope: punctuation.separator.expressions.java
    - include: code

  catch-statement-body:
    - meta_scope: meta.catch.java
    - match: (?=\()
      set:
        - catch-parameters-common
        - parameter-identifier
        - parameter-variadic
        - parameter-type
        - parameter-modifier
        - parens-begin
    - include: any_POP

  catch-parameters-common:
    - meta_scope: meta.catch.parameters.java meta.parens.java
    - include: parens-end
    - match: \|
      scope: punctuation.separator.pipe.java
      push: 
        - parameter-identifier
        - parameter-variadic
        - parameter-type
        - parameter-modifier
    - match: \S
      scope: invalid.illegal.missing-parameter-end
      pop: true

###[ OPERATORS ]###############################################################

  operators:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.12
    - match: (<<|>>>?|[-+*/%|&\^])=
      scope: keyword.operator.assignment.augmented.java
      push: assignment-body
    - match: '<<|>>>?'
      scope: keyword.operator.bitwise.java
    - match: '==|!=|<=|>=|<>|<|>'
      scope: keyword.operator.comparison.java
    - match: '='
      scope: keyword.operator.assignment.java
      push: assignment-body
    - match: '\+\+?|\-\-?|[*/%]'
      scope: keyword.operator.arithmetic.java
    - match: '!|&&|\|\|'
      scope: keyword.operator.logical.java
    - match: '[~|&\^]'
      scope: keyword.operator.bitwise.java
    - match: '\?'
      scope: keyword.operator.ternary.java
      push: ternary-body

  assignment-body:
    - meta_scope: meta.assignment.rhs.java
    - match: (?=[,;)}\]])
      pop: true
    - include: code

  ternary-body:
    - match: ':'
      scope: keyword.operator.ternary.java
      pop: true
    - match: (?=[,;)}\]])
      pop: true
    - include: code

###[ PUNCTUATIONS ]############################################################

  punctuations:
    - match: '::'
      scope: punctuation.accessor.double-colon.java
      push: variable-maybe-function-reference
    - match: \.
      scope: punctuation.accessor.dot.java
      push:
        - include: variable-language-class
        - include: generic-type-arguments
    - include: punctuation-separator-comma
    - include: punctuation-terminator-semicolon

  punctuation-accessor-dot:
    - match: \.
      scope: punctuation.accessor.dot.java

  punctuation-separator-comma:
    - match: \,
      scope: punctuation.separator.comma.java

  punctuation-terminator-semicolon:
    - match: ;
      scope: punctuation.terminator.java

###[ ENTITY CLASS ]############################################################

  entity-class:
    - match: (?!{{reserved_words}}\b){{id}}
      branch_point: entity-class-identifier
      branch:
        - entity-class-qualified-identifier
        - entity-class-unqualified-identifier

  entity-class-qualified-identifier:
    - meta_scope: meta.path.java variable.namespace.java
    - match: ''
      push: [entity-class-qualified-identifier-path, generic-type-arguments]

  entity-class-qualified-identifier-path:
    - clear_scopes: 1
    - match: \.
      scope: punctuation.accessor.dot.java
      set:
        - clear_scopes: 1
        - match: (?={{reserved_words}}\b)
          pop: 2
        - match: '{{id}}'
          branch_point: entity-class-qualified-identifier
          branch:
            - entity-class-qualifier
            - entity-class-name
        - match: (?=\S)
          pop: 2
    - match: (?=\S)
      fail: entity-class-identifier

  entity-class-qualifier:
    - meta_scope: variable.namespace.java
    - match: ''
      push: [entity-class-qualifier-accessor, generic-type-arguments]

  entity-class-qualifier-accessor:
    - match: \.
      scope: punctuation.accessor.dot.java
      pop: 2
    - match: (?=\S)
      fail: entity-class-qualified-identifier

  entity-class-name:
    - meta_scope: entity.name.class.java
    - match: ''
      set: [immidiate_POP3, generic-type-arguments]

  entity-class-unqualified-identifier:
    - meta_scope: entity.name.class.java
    - match: ''
      set: generic-type-arguments

###[ ENTITY MODULE ]###########################################################

  entity-module:
    - match: (?!{{reserved_words}}\b){{id}}
      branch_point: entity-module-identifier
      branch:
        - entity-module-qualified-identifier
        - entity-module-unqualified-identifier

  entity-module-qualified-identifier:
    - meta_scope: meta.path.java variable.namespace.java
    - match: ''
      push:
        - clear_scopes: 1
        - match: \.
          scope: punctuation.accessor.dot.java
          set:
            - clear_scopes: 1
            - match: (?={{reserved_words}}\b)
              pop: 2
            - match: '{{id}}'
              branch_point: entity-module-qualified-identifier
              branch:
                - entity-module-qualifier
                - entity-module-name
            - match: (?=\S)
              pop: 2
        - match: (?=\S)
          fail: entity-module-identifier

  entity-module-qualifier:
    - meta_scope: variable.namespace.java
    - match: ''
      push:
        - match: \.
          scope: punctuation.accessor.dot.java
          pop: 2
        - match: (?=\S)
          fail: entity-module-qualified-identifier

  entity-module-name:
    - meta_scope: entity.name.namespace.module.java
    - match: ''
      pop: 3

  entity-module-unqualified-identifier:
    - meta_scope: entity.name.namespace.module.java
    - include: immediate_POP

###[ ENTITY PACKAGE ]##########################################################

  entity-package:
    - match: (?!{{reserved_words}}\b){{id}}
      branch_point: entity-package-identifier
      branch:
        - entity-package-qualified-identifier
        - entity-package-unqualified-identifier

  entity-package-qualified-identifier:
    - meta_scope: meta.path.java variable.namespace.java
    - match: ''
      push:
        - clear_scopes: 1
        - match: \.
          scope: punctuation.accessor.dot.java
          set:
            - clear_scopes: 1
            - match: (?={{reserved_words}}\b)
              pop: 2
            - match: '{{id}}'
              branch_point: entity-package-qualified-identifier
              branch: 
                - entity-package-qualifier
                - entity-package-name
            - match: (?=\S)
              pop: 2
        - match: (?=\S)
          fail: entity-package-identifier

  entity-package-qualifier:
    - meta_scope: variable.namespace.java
    - match: ''
      push:
        - match: \.
          scope: punctuation.accessor.dot.java
          pop: 2
        - match: (?=\S)
          fail: entity-package-qualified-identifier

  entity-package-name:
    - meta_scope: entity.name.namespace.package.java
    - match: ''
      pop: 3

  entity-package-unqualified-identifier:
    - meta_scope: entity.name.namespace.package.java
    - include: immediate_POP

###[ OBJECT TYPES ]############################################################

  # Stand-along uppercase id, either type or constant.
  # Should be used only inside code blocks.
  uppercase-identifiers:
    # Popular JDK classes
    - match: (?:UUID|UR[LI])\b
      scope: support.class.java
      push: after-object-type
    # Generic type variable
    - match: \p{Lu}\b
      scope: support.class.java
      push: after-object-type
    # Uppercase constants
    - match: '{{uppercase_id}}'
      scope: constant.other.java

  # Stand-alone type, maybe type of the variable or class object reference.
  # Should be used only inside code blocks.
  object-types:
    # Here the match is more complex than 'before_fqn'.
    # In code block we can't simply distinguish package from variable.
    - match: (?=(?:{{lowercase_id}}\.)+\p{Lu})
      push: [after-object-type, object-type-fqn]
    - match: '{{classcase_id}}'
      scope: support.class.java
      push: after-object-type

  object-type-fqn:
    - meta_scope: meta.path.java
    - include: variable-namespace
    - match: '{{classcase_id}}'
      scope: support.class.java
      pop: true
    - include: annotation
    - include: any_POP

  after-object-type:
    - match: (?=<)
      set: [array-modifier, generic-type-arguments]
    - match: \.(?!\.)
      scope: punctuation.accessor.dot.java
      set:
        - include: variable-language-class
        - match: '{{uppercase_id}}'
          scope: constant.other.java
          pop: true
        - match: '{{classcase_id}}'
          scope: support.class.java
          set: after-object-type
        - include: annotation
        - include: generic-type-arguments
    - include: array-modifier

  # Used in 'throws' and generic bounds
  object-type-reference:
    - match: '{{before_fqn}}'
      set:
        - meta_scope: meta.path.java
        - include: variable-namespace
        - include: object-type-reference-no-fqn
    - include: object-type-reference-no-fqn

  object-type-reference-no-fqn:
    - match: '{{classcase_id}}'
      scope: support.class.java
      set:
        - after-object-type-reference
        - illegal-array-modifier
        - generic-type-arguments
    - match: '{{storage_types}}'
      scope: invalid.illegal.unexpected-keyword.java
      set:
        - after-object-type-reference
        - illegal-array-modifier
        - generic-type-arguments
    - include: annotation
    - include: any_POP

  after-object-type-reference:
    - match: \.(?!\.)
      scope: punctuation.accessor.dot.java
      set: object-type-reference-no-fqn
    - include: any_POP

###[ OBJECT AND ARRAY TYPES ]##################################################

  # Used in method's and generic's parameters
  object-and-array-types:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-4.html#jls-4.3
    - match: '{{before_fqn}}'
      set:
        - meta_scope: meta.path.java
        - include: variable-namespace
        - include: object-and-array-types-no-fqn
    - match: '{{storage_types}}(?=\s*\[)'
      scope: storage.type.primitive.java
      set: array-modifier
    - match: '{{storage_types}}\b'
      scope: invalid.illegal.unexpected-keyword.java
      pop: true
    - include: object-and-array-types-no-fqn

  object-and-array-types-no-fqn:
    - match: '{{classcase_id}}\b'
      scope: support.class.java
      set: 
        - after-object-and-array-types
        - array-modifier
        - generic-type-arguments
    - include: annotation
    - include: any_POP

  after-object-and-array-types:
    - match: \.(?!\.)
      scope: punctuation.accessor.dot.java
      set: object-and-array-types-no-fqn
    - include: any_POP

###[ INHERRITED TYPE REFERENCES ]##############################################

  # Used in class-level 'extends' and 'implements'
  inherited-object-type-reference:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.4
    - match: '{{before_fqn}}'
      set:
        - meta_scope: meta.path.java
        - include: variable-namespace
        - include: inherited-object-type-reference-no-fqn
    - include: inherited-object-type-reference-no-fqn

  inherited-object-type-reference-no-fqn:
    - include: reserved-pop
    - match: '{{id}}'
      scope: entity.other.inherited-class.java
      set: 
        - inherrited-object-type-reference-child
        - illegal-array-modifier
        - generic-type-arguments
    - include: annotation
    - include: any_POP

  inherrited-object-type-reference-child:
    - match: \.(?!\.)
      scope: punctuation.accessor.dot.java
      set: inherited-object-type-reference-no-fqn
    - include: any_POP

###[ GENERIC TYPES ]###########################################################

  generic-type-parameters:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.2
    - match: <
      scope: punctuation.definition.generic.begin.java
      set: [generic-type-parameters-common, generic-type-parameter]
    - include: any_POP

  generic-type-parameters-common:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-4.html#jls-4.4
    - meta_scope: meta.generic.declaration.java
    - match: \,
      scope: punctuation.separator.comma.java
      push: generic-type-parameter
    - include: generic-type-terminator
    - include: generic-type-illegal-bounds
    - include: annotation
    - include: any_POP

  generic-type-parameter:
    - match: \?|{{storage_types}}\b
      scope: invalid.illegal.unexpected-keyword.java
      set: generic-type-parameter-bounds
    - include: reserved-pop
    - match: '{{id}}'
      scope: variable.parameter.type.java
      set: generic-type-parameter-bounds
    - include: annotation
    - include: any_POP

  generic-type-parameter-bounds:
    - match: extends\b
      scope: keyword.declaration.extends.java
      set: [generic-type-additional-bounds, object-type-reference]
    - match: super\b
      scope: invalid.illegal.unexpected-keyword.java
      set: object-type-reference
    - include: any_POP

  generic-type-arguments:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-4.html#jls-4.5
    - match: <
      scope: punctuation.definition.generic.begin.java
      set: [generic-type-arguments-common, generic-type-argument]
    - include: any_POP

  generic-type-arguments-common:
    - meta_scope: meta.generic.java
    - match: \,
      scope: punctuation.separator.comma.java
      push: generic-type-argument
    - include: generic-type-terminator
    - include: generic-type-illegal-bounds
    - include: annotation
    - include: any_POP

  generic-type-argument:
    - match: \?
      scope: keyword.operator.wildcard.java
      set: generic-type-arguments-bounds
    - include: object-and-array-types

  generic-type-arguments-bounds:
    - match: extends\b
      scope: keyword.declaration.extends.java
      set: [generic-type-additional-bounds, object-type-reference]
    - match: super\b
      scope: keyword.declaration.super.java
      set: object-type-reference
    - include: any_POP

  generic-type-illegal-bounds:
    - match: extends\b
      scope: invalid.illegal.unexpected-keyword.java
      push: [generic-type-additional-bounds, object-type-reference]
    - match: super\b
      scope: invalid.illegal.unexpected-keyword.java
      push: object-type-reference

  generic-type-additional-bounds:
    - match: '&'
      scope: keyword.operator.multiple-bounds.java
      push: object-type-reference
    - include: any_POP

  generic-type-terminator:
    - match: '>'
      scope: punctuation.definition.generic.end.java
      pop: true

###[ PRIMITIVE TYPES ]#########################################################

  primitive-types:
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      push: array-modifier

  array-modifier:
    - match: \[\s*\]
      scope: storage.modifier.array.java
    - include: annotation
    - include: any_POP

  storage-modifiers:
    - match: '{{storage_modifiers}}\b'
      scope: storage.modifier.java
