%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# https://docs.oracle.com/javase/specs/jls/se13/html/index.html
name: Java
file_extensions:
  - java
  - bsh
scope: source.java

variables:
  # Reserved keywords
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.9
  reserved_words: |-
    (?x:
      {{keywords}} |
      {{storage_types}} |
      {{storage_modifiers}} |
      {{constants}} |
      {{variables}}
    )
  keywords: |-
    (?x:
      {{declaration_keywords}} |
      {{control_keywords}} |
      {{operator_keywords}} |
      {{illegal_keywords}}
    )
  declaration_keywords: |-
    (?:class|enum|@?interface|var|void|extends|implements|import|package)
  control_keywords: |-
    (?x:
      assert|break|case|catch|continue|do|else|finally|for|if|return|switch|
      throw|throws|try|while
    )
  operator_keywords: (?:new|instanceof)
  illegal_keywords: (?:const|goto)

  # Storage Modifiers
  storage_modifiers: (?:{{class_modifier}}|{{class_no_modifier}})
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.1
  class_modifier: (?:public|protected|private|abstract|static|final|strictfp)
  class_no_modifier: (?:native|synchronized|default|transient|volatile)
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.8
  constructor_modifier: (?:public|protected|private)
  constructor_no_modifier: (?:abstract|static|final|strictfp|native|synchronized|default|transient|volatile)
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.3.1
  field_modifier: (?:public|protected|private|static|final|transient|volatile)
  field_no_modifier: (?:abstract|native|synchronized|strictfp|default)
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-9.1.1
  interface_modifier: (?:public|protected|private|abstract|static|strictfp)
  interface_no_modifier: (?:final|native|synchronized|default|transient|volatile)
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.4.3
  # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.4
  method_modifier: (?:public|protected|private|abstract|default|static|final|synchronized)
  method_no_modifier: (?:native|strictfp|transient|volatile)

  # Storage Types
  storage_types: (?:boolean|byte|char|short|int|float|long|double)

  # Literals
  constants: (?:false|null|true)
  variables: (?:_|super|this)

  # Identifiers
  id: (?:[\p{L}_$][\p{L}\p{N}_$]*)
  classcase_id: (?:\p{Lu}[\p{L}\p{N}_$]*)
  lowercase_id: (?:[_$]*\p{Ll}[\p{Ll}\p{N}_$]*\b)
  uppercase_id: (?:[_$]*\p{Lu}[\p{Lu}\p{N}_$]*\b)

  # One dot is mandatory to not compete with other regexes that match an id.
  before_fqn: (?={{lowercase_id}}\s*\.[^.])

  # digits
  bin_digit: '[01_]'
  oct_digit: '[0-7_]'
  dec_digit: '[\d_]'
  hex_digit: '[\h_]'
  dec_exponent: '[eE][-+]?{{dec_digit}}*'
  hex_exponent: '[pP][-+]?{{dec_digit}}*'

  # operators
  accessor_dot: \.(?=[^.])

contexts:
  main:
    - include: prototype
    - include: statements
    - include: declarations

  statements:
    - include: punctuation-terminator-semicolon
    - include: blocks
    - include: flow-control-statement
    - include: if-else-statement
    - include: switch-case-statement
    - include: do-while-statement
    - include: for-statement
    - include: synchronized-statement
    - include: try-catch-statement
    - include: labeled-statement

  expressions:
    - include: parens-or-lambda
    - include: numbers
    - include: punctuations
    - include: operators
    - include: instantiation
    - include: constants
    - include: strings
    - include: primitive-types
    - include: storage-modifiers
    - include: uppercase-identifiers
    - include: object-types
    - include: variables

###[ COMMENTS ]################################################################

  comments:
    - match: /\*\*/
      scope: comment.block.empty.java punctuation.definition.comment.java
    - include: scope:text.html.javadoc
    - match: /\*
      scope: punctuation.definition.comment.begin.java
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.java
        - match: \*/
          scope: punctuation.definition.comment.end.java
          pop: 1
    - match: //
      scope: punctuation.definition.comment.java
      push:
        - meta_include_prototype: false
        - meta_scope: comment.line.double-slash.java
        - match: \n
          pop: 1
        - match: (?=%>)
          pop: 1

###[ ANNOTATIONS ]#############################################################

  annotation:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.7
    - match: \@
      scope: punctuation.definition.annotation.java
      push:
        - annotation-parameters
        - annotation-identifier

  annotation-identifier:
    - include: reserved-pop
    - match: '{{id}}'
      branch_point: annotation-identifier
      branch:
        - annotation-qualified-identifier
        - annotation-unqualified-identifier
    - include: else-pop

  annotation-qualified-identifier:
    - meta_scope: meta.path.java variable.annotation.namespace.java
    - match: ''
      push:
        - annotation-path
        - annotation-path-accessor

  annotation-path-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: annotation-identifier

  annotation-path:
    - clear_scopes: 1
    - include: reserved-pop3
    - match: '{{id}}'
      branch_point: annotation-qualified-identifier
      branch:
        - annotation-qualifier
        - annotation-name
    - include: else-pop3

  annotation-qualifier:
    - meta_scope: variable.annotation.namespace.java
    - match: ''
      push:
        - clear_scopes: 1
        - include: punctuation-accessor-dot-pop2
        - match: (?=\S)
          fail: annotation-qualified-identifier

  annotation-name:
    - meta_scope: variable.annotation.java
    - include: immediately-pop4

  annotation-unqualified-identifier:
    - meta_scope: variable.annotation.java
    - include: immediately-pop2

  annotation-parameters:
    - meta_scope: meta.annotation.identifier.java
    - match: (?=\()
      set: [annotation-parameters-common, parens-begin]
    - include: else-pop

  annotation-parameters-common:
    - meta_scope: meta.annotation.parameters.java meta.parens.java
    - include: parens-end
    - match: (?={{id}})
      branch_point: annotation-parameter
      branch:
        - - match: '{{id}}'
            scope: variable.parameter.java
            push:
              - match: =
                scope: keyword.operator.assignment.java
                pop: 2
              - match: (?=\S)
                fail: annotation-parameter
        - expression-pop
    - include: variable-initializers

###[ DECLARATIONS ]############################################################

  declarations:
    - include: import
    - include: module
    - include: package
    - match: (?=\S)
      branch_point: declarations
      branch:
        - constructor-declaration
        - method-declaration
        - field-declaration
        - class-declaration
        - enum-declaration
        - interface-declaration
        - other-declaration

  other-declaration:
    - match: void\b
      scope: storage.type.void.java
      pop: 1
    - include: expression-pop

###[ PACKAGE DECLARATION ]#####################################################

  package:
    - match: package\b
      scope:
        meta.namespace.package.java
        storage.type.namespace.package.java
        keyword.declaration.namespace.package.java
      push: [package-identifier, else-pop]

  package-identifier:
    - meta_content_scope: meta.namespace.package.identifier.java
    - include: reserved-pop
    - include: entity-package
    - include: immediately-pop

###[ MODULE DECLARATION ]######################################################

  module:
    - match: (?:(open)\s+)?(module)\b
      scope: meta.namespace.module.java
      captures:
        1: storage.modifier.java
        2: storage.type.namespace.module.java
           keyword.declaration.namespace.module.java
      push: [module-body-block, module-identifier, else-pop]

  module-identifier:
    - include: reserved-pop
    - include: entity-module
    - include: immediately-pop

  module-body-block:
    - meta_content_scope: meta.namespace.module.identifier.java
    - match: (?=\{)
      set: [module-body-common, block-begin]
    - include: else-pop

  module-body-common:
    - meta_scope: meta.namespace.module.java meta.block.java
    - include: block-end
    - include: punctuation-terminator-semicolon
    - match: exports\b
      scope: keyword.other.module.exports.java
      push: [module-exports-meta, module-exports-or-opens-body]
    - match: opens\b
      scope: keyword.other.module.opens.java
      push: [module-opens-meta, module-exports-or-opens-body]
    - match: requires\b
      scope: keyword.other.module.requires.java
      push: module-requires-body
    - match: uses\b
      scope: keyword.other.module.uses.java
      push: [module-uses-meta, module-provides-or-uses-body]
    - match: provides\b
      scope: keyword.other.module.provides.java
      push: [module-provides-meta, module-provides-or-uses-body]

  module-exports-meta:
    - meta_scope: meta.exports.java
    - include: immediately-pop

  module-opens-meta:
    - meta_scope: meta.opens.java
    - include: immediately-pop

  module-exports-or-opens-body:
    - include: module-statement-terminator
    - match: to\b
      scope: keyword.other.module.to.java
      set:
        - include: module-statement-terminator
        - include: punctuation-separator-comma
        - include: entity-module
    - include: entity-package

  module-requires-body:
    - meta_scope: meta.requires.java
    - match: transitive\b
      scope: keyword.other.module.transitive.java
    - include: module-statement-terminator
    - include: entity-module

  module-uses-meta:
    - meta_scope: meta.uses.java
    - include: immediately-pop

  module-provides-meta:
    - meta_scope: meta.provides.java
    - include: immediately-pop

  module-provides-or-uses-body:
    - include: module-statement-terminator
    - match: with\b
      scope: keyword.other.module.with.java
      set:
        - include: module-statement-terminator
        - include: punctuation-separator-comma
        - include: entity-class
    - include: entity-class

  module-statement-terminator:
    - match: (?=[;}]|(?:exports|opens|requires|provides|uses|{{reserved_words}})\b)
      pop: 1

###[ IMPORT DECLARATION ]######################################################

  import:
    - match: import\b
      scope: keyword.control.import.java
      push: import-modifier

  import-modifier:
    - meta_scope: meta.import.java
    - match: static\b
      scope: storage.modifier.java
      set:
        - meta_content_scope: meta.import.java
        - match: (?=\S)
          set: import-static-namespace
    - match: (?=\S)
      set: import-normal-namespace

  import-normal-namespace:
    - meta_content_scope: meta.import.java meta.path.java
    - include: import-terminator
    - include: import-package-name
    - match: (?=\S)
      set: import-normal-class

  import-normal-class:
    - meta_content_scope: meta.import.java meta.path.java
    - include: import-terminator
    - include: import-class-name
    - include: import-wildcard
    - include: else-pop

  import-static-namespace:
    - meta_content_scope: meta.import.java meta.path.java
    - include: import-terminator
    - include: import-package-name
    - match: (?=\S)
      set: import-static-class

  import-static-class:
    - meta_content_scope: meta.import.java meta.path.java
    - include: import-terminator
    - include: import-constant-name
    - include: import-class-name
    - include: import-function-name
    - include: import-wildcard
    - include: else-pop

  import-constant-name:
    - match: '{{uppercase_id}}\b(?!\s*\.)'
      scope: entity.name.constant.java
      set: import-expect-terminator

  import-package-name:
    - match: '{{lowercase_id}}'
      scope: variable.namespace.java
      push: import-acessor-or-termintor
    - include: punctuation-accessor-dot

  import-class-name:
    - match: '{{classcase_id}}'
      scope: entity.name.class.java
      push: import-acessor-or-termintor
    - include: punctuation-accessor-dot

  import-function-name:
    - match: '{{id}}'
      scope: entity.name.function.java
      set: import-expect-terminator

  import-wildcard:
    - match: \*
      scope: keyword.operator.wildcard.asterisk.java
      set: import-expect-terminator

  import-acessor-or-termintor:
    # continue with the import context
    - include: punctuation-accessor-dot-pop
    # pop the import context
    - match: (?=\s*;|\S)
      pop: 2

  import-expect-terminator:
    - include: import-terminator
    - match: \S
      scope: invalid.illegal.expect-semicolon.java

  import-terminator:
    - match: (?=\s*;|{{reserved_words}}\b)
      pop: 1

###[ CLASS DECLARATION ]#######################################################

  class-declaration:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1
    - meta_scope: meta.class.java
    - match: class\b
      scope:
        storage.type.class.java
        keyword.declaration.class.java
      set:
        - class-body-block
        - class-extends
        - class-name-meta
        - generic-type-parameters
        - class-name
    - match: '{{class_modifier}}\b'
      scope: storage.modifier.java
    - match: '{{class_no_modifier}}\b'
      scope: invalid.illegal.unexpected-keyword.java
    - include: annotation
    - match: (?=\S)
      fail: declarations

  class-name:
    - include: reserved-pop
    - match: '{{id}}'
      scope: entity.name.class.java
      pop: 1
    - include: else-pop

  class-name-meta:
    - meta_content_scope: meta.class.identifier.java
    - include: else-pop

  class-extends:
    - match: extends\b
      scope: keyword.declaration.extends.java
      push:
        - class-extends-object-type-references
        - inherited-object-type-reference
    - match: implements\b
      scope: keyword.declaration.implements.java
      push:
        - class-implements-object-type-references
        - inherited-object-type-reference
    - include: else-pop

  class-extends-object-type-references:
    - meta_scope: meta.class.extends.java
    - include: inherited-object-type-references
    - include: else-pop

  class-implements-object-type-references:
    - meta_scope: meta.class.implements.java
    - include: inherited-object-type-references
    - include: else-pop

  class-body-block:
    - match: (?=\{)
      set: [class-body-block-common, block-begin]
    - include: else-pop

  class-body-block-common:
    - meta_scope: meta.class.java meta.block.java
    - include: block-end
    - include: class-body

  class-body:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.6
    - include: punctuation-terminator-semicolon
    - include: blocks
    - include: flow-control-statement
    - include: if-else-statement
    - include: switch-case-statement
    - include: do-while-statement
    - include: for-statement
    - include: try-catch-statement
    - include: labeled-statement
    - include: declarations

###[ ENUM DECLARATION ]########################################################

  enum-declaration:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.9
    - meta_scope: meta.enum.java
    - match: enum\b
      scope:
        storage.type.enum.java
        keyword.declaration.enum.java
      set:
        - enum-body-block
        - enum-extends
        - enum-name-meta
        - illegal-type-parameters
        - enum-name
    - match: '{{class_modifier}}\b'
      scope: storage.modifier.java
    - match: '{{class_no_modifier}}\b'
      scope: invalid.illegal.unexpected-keyword.java
    - include: annotation
    - match: (?=\S)
      fail: declarations

  enum-name:
    - include: reserved-pop
    - match: '{{id}}'
      scope: entity.name.enum.java
      pop: 1
    - include: else-pop

  enum-name-meta:
    - meta_content_scope: meta.enum.identifier.java
    - include: else-pop

  enum-extends:
    - match: extends\b
      scope: invalid.illegal.unexpected-extends.java
      push:
        - enum-extends-object-type-references
        - inherited-object-type-reference
    - match: implements\b
      scope: keyword.declaration.implements.java
      push:
        - enum-implements-object-type-references
        - inherited-object-type-reference
    - include: else-pop

  enum-extends-object-type-references:
    - meta_scope: meta.enum.extends.java
    - include: inherited-object-type-references
    - include: else-pop

  enum-implements-object-type-references:
    - meta_scope: meta.enum.implements.java
    - include: inherited-object-type-references
    - include: else-pop

  enum-body-block:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.9.1
    - match: (?=\{)
      set: [enum-body-block-common, enum-constants-list, block-begin]
    - include: else-pop

  enum-body-block-common:
    - meta_scope: meta.enum.java meta.block.java
    - include: block-end
    - include: class-body

  enum-constants-list:
    - meta_content_scope: meta.sequence.constants.java
    - include: reserved-pop
    - match: '{{id}}'
      scope: entity.name.constant.java
      push: enum-constant-arguments
    - include: punctuation-separator-comma
    - include: else-pop

  enum-constant-arguments:
    - meta_scope: meta.constant.identifier.java
    - match: (?=\()
      set: [enum-constant-body-block, enum-constant-arguments-common, parens-begin]
    - include: enum-constant-body-block

  enum-constant-arguments-common:
    - clear_scopes: 1
    - meta_scope: meta.constant.arguments.java meta.parens.java
    - include: parens-common

  enum-constant-body-block:
    - meta_scope: meta.constant.java
    - match: (?=\{)
      set: [enum-constant-body-block-common, block-begin]
    - include: else-pop

  enum-constant-body-block-common:
    - meta_scope: meta.constant.java meta.block.java
    - include: block-end
    - include: class-body

###[ INTERFACE DECLARATION ]###################################################

  interface-declaration:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.1
    - meta_scope: meta.interface.java
    - match: (@?)interface\b
      scope:
        storage.type.interface.java
        keyword.declaration.interface.java
      set:
        - interface-body-block
        - interface-extends
        - interface-name-meta
        - generic-type-parameters
        - interface-name
    - match: '{{interface_modifier}}\b'
      scope: storage.modifier.java
    - match: '{{interface_no_modifier}}\b'
      scope: invalid.illegal.unexpected-keyword.java
    - include: annotation
    - match: (?=\S)
      fail: declarations

  interface-name:
    - include: reserved-pop
    - match: '{{id}}'
      scope: entity.name.interface.java
      pop: 1
    - include: else-pop

  interface-name-meta:
    - meta_content_scope: meta.interface.identifier.java
    - include: else-pop

  interface-extends:
    - match: extends\b
      scope: keyword.declaration.extends.java
      push:
        - interface-extends-object-type-references
        - inherited-object-type-reference
    - match: implements\b
      scope: invalid.illegal.unexpected-implements.java
      push:
        - interface-implements-object-type-references
        - inherited-object-type-reference
    - include: else-pop

  interface-extends-object-type-references:
    - meta_scope: meta.interface.extends.java
    - include: inherited-object-type-references
    - include: else-pop

  interface-implements-object-type-references:
    - meta_scope: meta.interface.implements.java
    - include: inherited-object-type-references
    - include: else-pop

  interface-body-block:
    - match: (?=\{)
      set: [interface-body-block-common, block-begin]
    - include: else-pop

  interface-body-block-common:
    - meta_scope: meta.interface.java meta.block.java
    - include: block-end
    - include: class-body

###[ FIELD DECLARATION ]#######################################################

  field-declaration:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.3
    - match: ''
      push:
        - field-names
        - field-type
        - field-modifier

  field-modifier:
    - clear_scopes: 1
    - meta_scope: meta.field.modifier.java
    - match: '{{field_modifier}}\b'
      scope: storage.modifier.java
    - match: '{{field_no_modifier}}\b'
      scope: invalid.illegal.unexpected-keyword.java
    - include: generic-type
    - include: annotation
    - include: else-pop

  field-type:
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      set: array-modifier
    - match: var\b
      scope: invalid.illegal.unexpected-type.java
      set: array-modifier
    - include: object-type

  field-names:
    - meta_scope: meta.field.type.java
    - match: (?=[{(]|{{declaration_keywords}}\b)
      fail: declarations
    - match: ''
      set:
        - field-list
        - field-value
        - field-name-meta
        - field-name

  field-list:
    - match: \,
      scope:
        meta.field.java
        punctuation.separator.sequence.java
      push:
        - field-value
        - field-name-meta
        - field-name
    - include: else-pop2

  field-name:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-VariableDeclaratorId
    - include: reserved-pop
    - match: '{{variables}}\b'
      scope: invalid.illegal.identifier.java
      set: [illegal-members, array-modifier]
    - match: '{{uppercase_id}}'
      scope: entity.name.constant.java
      set: [illegal-members, array-modifier]
    - match: '{{id}}'
      scope: variable.other.member.java
      set: [illegal-members, array-modifier]
    - include: else-pop

  field-name-meta:
    - meta_content_scope: meta.field.identifier.java
    - include: immediately-pop

  field-value:
    - match: =
      scope:
        meta.field.java
        keyword.operator.assignment.java
      set:
        - field-value-meta
        - variable-initializer
    - include: else-pop

  field-value-meta:
    - meta_content_scope: meta.field.value.java
    - include: immediately-pop

###[ METHOD DECLARATION ]######################################################

  constructor-declaration:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.8
    - match: ''
      push:
        - method-body-block
        - method-attributes
        - method-modifiers
        - method-parameters
        - constructor-name
        - method-modifier

  constructor-name:
    - match: (?={{reserved_words}}\b)
      fail: declarations
    - match: '{{id}}'
      scope: entity.name.function.constructor.java
      pop: 1
    - include: else-pop

  method-declaration:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.4
    - match: ''
      push:
        - method-body-block
        - method-attributes
        - method-modifiers
        - method-parameters
        - method-name
        - method-result-meta
        - method-result
        - method-modifier

  method-modifier:
    - clear_scopes: 1
    - meta_scope: meta.method.modifier.java
    - match: '{{method_modifier}}\b'
      scope: storage.modifier.java
    - match: '{{method_no_modifier}}\b'
      scope: invalid.illegal.unexpected-keyword.java
    - include: generic-type
    - include: annotation
    - include: else-pop

  method-result:
    - match: void\b
      scope: storage.type.void.java
      set: else-pop
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      set: array-modifier
    - match: var\b
      scope: invalid.illegal.unexpected-type.java
      set: array-modifier
    - match: (?=\{|{{reserved_words}}\b)
      fail: declarations
    - include: object-type

  method-result-meta:
    - clear_scopes: 1
    - meta_scope: meta.method.return-type.java
    - include: immediately-pop

  method-name:
    - match: (?={{reserved_words}}\b)
      fail: declarations
    - match: '{{id}}'
      scope: entity.name.function.java
      pop: 1
    - include: else-pop

  method-parameters:
    - meta_content_scope: meta.method.identifier.java
    - match: (?=\()
      set:
        - method-parameters-common
        - parameter-maybe-receiver
        - parameter-variadic
        - parameter-type
        - parens-begin
    - match: (?=\S)
      fail: declarations

  method-parameters-common:
    - meta_scope: meta.method.parameters.java meta.parens.java
    - include: parameters-list
    - include: parens-end
    - match: \S
      scope: invalid.illegal.missing-parameter-end
      pop: 1

  method-modifiers:
    - match: ''
      set:
        - meta_scope: meta.method.java
        - include: array-modifier

  method-attributes:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.4.6
    - match: throws\b
      scope: keyword.declaration.throws.java
      set:
        - method-throws-object-type-references
        - object-type-reference
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-9.html#jls-9.6.2
    - match: default\b
      scope: keyword.declaration.default.java
      set:
        - method-default-meta
        - variable-initializer
    - include: else-pop

  method-default-meta:
    - meta_scope: meta.method.default.java
    - include: immediately-pop

  method-throws-object-type-references:
    - meta_scope: meta.method.throws.java
    - include: object-type-references
    - include: else-pop

  method-body-block:
    - match: (?=\{)
      set: [method-body-common, block-begin]
    - include: else-pop2

  method-body-common:
    - meta_scope: meta.method.java meta.block.java
    - include: block-end2
    - include: blocks-body

###[ BLOCKS ]##################################################################

  block-begin:
    - match: \{
      scope: punctuation.section.block.begin.java
      pop: 1

  block-end:
    - match: \}
      scope: punctuation.section.block.end.java
      pop: 1

  block-end2:
    - match: \}
      scope: punctuation.section.block.end.java
      pop: 2

  blocks:
    - match: \{
      scope: punctuation.section.block.begin.java
      push: blocks-common
    - include: stray-braces

  block:
    - match: \{
      scope: punctuation.section.block.begin.java
      set: blocks-common

  block-or-expression:
    - include: block
    - include: else-expression-pop

  blocks-common:
    - meta_scope: meta.block.java
    - include: block-end
    - include: blocks-body

  blocks-body:
    - include: var-declaration
    - include: statements
    - include: expressions
    - include: stray-parens

###[ LOCAL VARIABLE DECLARATION ]##############################################

  variable-declaration-type:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.4
    - match: final\b
      scope: storage.modifier.java
    - match: '{{storage_modifiers}}\b'
      scope: invalid.illegal.unexpected-keyword.java
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      set: array-modifier
    - match: var\b
      scope: storage.type.var.java
      set: array-modifier
    - include: object-type

  variable-declaration-list:
    - match: \,
      scope: punctuation.separator.sequence.java
      push:
        - variable-declaration-value
        - variable-declaration-identifier

  variable-declaration-identifier:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-VariableDeclaratorId
    - include: expression-terminator
    - match: '{{variables}}\b'
      scope: invalid.illegal.identifier.java
      set: [illegal-members, array-modifier]
    - match: '{{uppercase_id}}'
      scope: entity.name.constant.java
      set: [illegal-members, array-modifier]
    - match: '{{id}}'
      scope: variable.other.readwrite.java
      set: [illegal-members, array-modifier]
    - include: else-pop

  variable-declaration-value:
    - match: =
      scope: keyword.operator.assignment.java
      set: variable-initializer
    - include: else-pop

###[ VAR DECLARATION ]#########################################################

  var-declaration:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.4
    - match: var\b
      scope: storage.type.var.java
      push:
        - var-expect-terminator
        - variable-declaration-value
        - var-variable-name
        - illegal-array-modifier
    - match: final\b
      scope: storage.modifier.java

  var-variable-name:
    - include: expression-terminator
    - match: '{{variables}}\b'
      scope: invalid.illegal.identifier.java
      set: [illegal-members, illegal-array-modifier]
    - match: '{{uppercase_id}}'
      scope: entity.name.constant.java
      set: [illegal-members, illegal-array-modifier]
    - match: '{{id}}'
      scope: variable.other.readwrite.java
      set: [illegal-members, illegal-array-modifier]
    - include: else-pop

  var-expect-terminator:
    - match: ','
      scope: invalid.illegal.expect-terminator.java
      pop: 1
    - include: expression-terminator

###[ IF ELSE STATEMENT ]#######################################################

  if-else-statement:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.9
    - match: if\b
      scope: keyword.control.conditional.if.java
      push:
        - if-meta
        - block-or-expression
        - if-condition
    - match: else\b
      scope: keyword.control.conditional.else.java
      push:
        - else-meta
        - block-or-expression

  if-meta:
    - meta_scope: meta.if.java
    - include: immediately-pop

  if-condition:
    - match: (?=\()
      set: [parens-common, parens-begin]
    - include: else-pop

  else-meta:
    - meta_scope: meta.else.java
    - include: immediately-pop

###[ SWITCH CASE STATEMENT ]###################################################

  switch-case-statement:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.11
    - match: case\b
      scope: keyword.control.conditional.case.java
      branch_point: case-label
      branch:
        - case-label-constant
        - case-label-expression
    - match: default\b
      scope: keyword.control.conditional.default.java
      push: default-end
    - match: switch\b
      scope: keyword.control.conditional.switch.java
      push:
        - switch-meta
        - block-or-expression
        - switch-parameters

  switch-meta:
    - meta_scope: meta.switch.java
    - include: immediately-pop

  switch-parameters:
    - match: (?=\()
      set: [parens-common, parens-begin]
    - include: else-pop

  case-label-constant:
    - meta_scope: meta.case.java
    - match: ''
      push:
        - case-label-constant-end
        - case-label-constant-identifier

  case-label-constant-identifier:
    - include: reserved-pop
    - include: enum-constant
    - include: else-pop

  case-label-constant-end:
    - match: ':'
      scope: punctuation.separator.expressions.java
      pop: 2
    - match: (?=\S)
      fail: case-label

  case-label-expression:
    - meta_scope: meta.case.java
    - match: ':'
      scope: punctuation.separator.expressions.java
      pop: 1
    - include: expression-pop

  default-end:
    - meta_scope: meta.default.java
    - match: ':'
      scope: punctuation.separator.expressions.java
      pop: 1
    - include: else-pop

###[ DO WHILE STATEMENT ]######################################################

  do-while-statement:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.12
    - match: while\b
      scope: keyword.control.loop.while.java
      push:
        - while-meta
        - block-or-expression
        - while-condition
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.13
    - match: do\b
      scope: keyword.control.loop.do-while.java
      push:
        - do-meta
        - block-or-expression

  do-meta:
    - meta_scope: meta.do.java
    - include: immediately-pop

  while-meta:
    - meta_scope: meta.while.java
    - include: immediately-pop

  while-condition:
    - match: (?=\()
      set: [parens-common, parens-begin]
    - include: else-pop

###[ FOR LOOP STATEMENT ]######################################################

  for-statement:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.14
    - match: for\b
      scope: keyword.control.loop.for.java
      push:
        - for-meta
        - block-or-expression
        - for-parameters

  for-meta:
    - meta_scope: meta.for.java
    - include: immediately-pop

  for-parameters:
    - match: (?=\()
      set:
        - for-parameters-end
        - for-parameters-body
        - variable-declaration-identifier
        - variable-declaration-type
        - parens-begin
    - include: else-pop

  for-parameters-body:
    # enhanced for statement
    - match: ':'
      scope: keyword.operator.assignment.java
      set: for-parameters-update
    # basic for statement
    - match: (?=\S)
      set:
        - for-parameters-update
        - for-parameters-condition
        - for-parameters-init
        - variable-declaration-value

  for-parameters-init:
    - include: punctuation-terminator-semicolon-pop
    - include: variable-declaration-list
    - include: else-pop

  for-parameters-condition:
    - include: punctuation-terminator-semicolon-pop
    - include: illegal-open-block
    - include: expressions
    - include: else-pop

  for-parameters-update:
    - include: illegal-open-block
    - include: expressions
    - include: else-pop

  for-parameters-end:
    - meta_scope: meta.parens.java
    - include: parens-end
    - include: illegal-open-block
    - match: ;
      scope: invalid.illegal.stray-terminator-end
    - include: else-pop

###[ FLOW CONTROL STATEMENT ]##################################################

  labeled-statement:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.7
    - match: ({{id}})(:)(?!:)
      captures:
        1: entity.name.label.java
        2: punctuation.separator.colon.java

  flow-control-statement:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.10
    - match: assert\b
      scope: keyword.control.flow.assert.java
      push: assert-statement-body
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.15
    - match: break\b
      scope: keyword.control.flow.break.java
      push:
        - break-statement-end
        - variable-label
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.16
    - match: continue\b
      scope: keyword.control.flow.continue.java
      push:
        - continue-statement-end
        - variable-label
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.17
    - match: return\b
      scope: keyword.control.flow.return.java
      push: return-statement-body
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.18
    - match: throw\b
      scope: keyword.control.flow.throw.java
      push: throw-statement-body

  assert-statement-body:
    - meta_scope: meta.assertion.java
    - match: ':'
      scope: punctuation.separator.expressions.java
    - include: expression-pop

  break-statement-end:
    - meta_scope: meta.break.java
    - include: expect-expression-terminator

  continue-statement-end:
    - meta_scope: meta.continue.java
    - include: expect-expression-terminator

  return-statement-body:
    - meta_scope: meta.return.java
    - include: expression-pop

  throw-statement-body:
    - meta_scope: meta.throw.java
    - include: expression-pop

  variable-label:
    - include: reserved-pop
    - match: '{{id}}'
      scope: variable.label.java
      pop: 1
    - include: else-pop

###[ SYNCHRONIZED STATEMENT ]##################################################

  synchronized-statement:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.19
    - match: synchronized\b
      scope: keyword.control.flow.synchronized.java
      push:
        - synchronized-meta
        - block-or-expression
        - synchronized-parameters

  synchronized-meta:
    - meta_scope: meta.synchronized.java
    - include: immediately-pop

  synchronized-parameters:
    - match: (?=\()
      set: [parens-common, parens-begin]
    - include: else-pop

###[ TRY CATCH STATEMENT ]#####################################################

  try-catch-statement:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-14.html#jls-14.20
    - match: catch\b
      scope: keyword.control.exception.catch.java
      push:
        - catch-meta
        - block-or-expression
        - catch-parameters
    - match: finally\b
      scope: keyword.control.exception.finally.java
      push:
        - finally-meta
        - block-or-expression
    - match: try\b
      scope: keyword.control.exception.try.java
      push:
        - try-meta
        - block-or-expression
        - try-parameters

  catch-meta:
    - meta_scope: meta.catch.java
    - include: immediately-pop

  catch-parameters:
    - match: (?=\()
      set:
        - catch-parameters-end
        - parameter-identifier
        - catch-parameters-typelist
        - parameter-type
        - parens-begin
    - include: else-pop

  catch-parameters-typelist:
    - match: \|
      scope: punctuation.separator.pipe.java
      push: parameter-type
    - include: else-pop

  catch-parameters-end:
    - meta_scope: meta.parens.java
    - include: parens-end
    - match: \S
      scope: invalid.illegal.missing-parameter-end
      pop: 1

  finally-meta:
    - meta_scope: meta.finally.java
    - include: immediately-pop

  try-meta:
    - meta_scope: meta.try.java
    - include: immediately-pop

  try-parameters:
    - match: (?=\()
      set: [try-parameters-common, parens-begin]
    - include: else-pop

  try-parameters-common:
    - meta_scope: meta.parens.java
    - include: parens-end
    - include: punctuation-terminator-semicolon
    - match: ','
      scope: punctuation.separator.sequence.java
      push: variable-declaration-identifier
    - match: =
      scope: keyword.operator.assignment.java
      push: variable-initializer
    - match: (?=[\p{L}_$@<])
      branch_point: try-parameter
      branch:
        - try-parameter-assignment
        - try-parameter-definition
    - include: expect-expression-terminator

  try-parameter-assignment:
    - match: ''
      push:
        - try-parameter-assignment-end
        - variable-declaration-identifier

  try-parameter-assignment-end:
    - match: (?=[=,:;)}])
      pop: 2
    - match: (?=\S)
      fail: try-parameter

  try-parameter-definition:
    - match: ''
      set:
        - variable-declaration-identifier
        - variable-declaration-type

###[ INSTANTIATION ]###########################################################

  instantiation:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.9
    - match: new\b
      scope: keyword.other.storage.new.java
      push:
        - instantiation-meta
        - instantiation-type
        - generic-type-arguments
    - include: annotation

  instantiation-meta:
    - meta_scope: meta.instantiation.java
    - include: immediately-pop

  instantiation-type:
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      set: array-dimensions
    - match: '{{before_fqn}}'
      set:
        - meta_scope: meta.path.java
        - include: variable-namespace
        - include: instantiation-type-identifier
    - include: instantiation-type-identifier

  instantiation-type-identifier:
    - match: '{{classcase_id}}'
      scope: support.class.java
      set: after-object-type-in-instantiation
    - include: annotation
    - include: else-pop

  after-object-type-in-instantiation:
    - match: <>
      scope:
        meta.generic.java
        punctuation.definition.generic.diamond.java
      set: constructor-arguments
    - match: <
      scope: punctuation.definition.generic.begin.java
      set:
        - instantiation-array-or-object
        - generic-type-arguments-common
        - generic-type-argument
    - match: '{{accessor_dot}}'
      scope: punctuation.accessor.dot.java
      set: instantiation-type-identifier
    - include: instantiation-array-or-object

  instantiation-array-or-object:
    - include: array-dimensions
    - include: constructor-arguments

  constructor-arguments:
    - match: \(
      scope: punctuation.section.parens.begin.java
      set:
        - meta_scope: meta.parens.java
        - match: \)
          scope: punctuation.section.parens.end.java
          set: class-body-block
        - include: illegal-parens-terminators
        - include: expressions
    - include: else-pop

  array-dimensions:
    - match: \[
      scope: punctuation.section.brackets.begin.java
      set:
        - meta_scope: meta.brackets.java
        - match: \]
          scope: punctuation.section.brackets.end.java
          set:
            - include: array-dimensions
            - include: else-pop
        - include: expressions
    - include: array-initializer
    - include: annotation

###[ INITIALIZERS ]############################################################

  variable-initializers:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.3
    - include: array-initializers
    - include: ternary-initializers
    - include: expressions

  variable-initializer:
    - include: array-initializers
    - include: ternary-initializers
    - include: expression-pop

  array-initializers:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-10.html#jls-10.6
    - match: \{
      scope: punctuation.section.braces.begin.java
      push: array-initializer-common

  array-initializer:
    - match: \{
      scope: punctuation.section.braces.begin.java
      set: array-initializer-common

  array-initializer-common:
    - meta_scope: meta.braces.java
    - match: \}
      scope: punctuation.section.braces.end.java
      pop: 1
    - include: variable-initializers

  ternary-initializers:
    - match: \?
      scope: keyword.operator.ternary.java
      push:
        - include: operator-ternary-colon
        - include: variable-initializer

###[ LAMBDAS AND PARENS ]######################################################

  parens-or-lambda:
    - match: \(
      scope: punctuation.section.parens.begin.java
      branch_point: lambda-or-parens
      branch:
        - parens-with-expressions
        - parens-with-lambda-parameters
    - match: ->
      scope:
        meta.function.anonymous.java
        storage.type.function.anonymous.java
      push:
        - lambda-meta
        - block-or-expression

  parens-with-expressions:
    - meta_scope: meta.parens.java
    - match: \)
      scope: meta.parens.java punctuation.section.parens.end.java
      push:
        - clear_scopes: 1
        - match: (?=->)
          fail: lambda-or-parens
        - include: else-pop2
    - include: parens-body

  parens-with-lambda-parameters:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-15.html#jls-15.27
    - meta_scope: meta.function.anonymous.parameters.java meta.parens.java
    - match: \)
      scope: punctuation.section.parens.end.java
      set: lambda-meta
    - include: punctuation-separator-comma
    - match: (?=[\p{L}_$@<])
      branch_point: lambda-parameter-declaration
      branch:
        - lambda-parameter-implicit-declaration
        - lambda-parameter-explicit-declaration
    - include: expect-expression-terminator

  lambda-parameter-implicit-declaration:
    - match: '{{id}}'
      scope: variable.parameter.java
      push:
        - match: (?=[=,:;)}])
          pop: 2
        - match: (?=\S)
          fail: lambda-parameter-declaration
    - match: (?=\S)
      fail: lambda-parameter-declaration

  lambda-parameter-explicit-declaration:
    - match: ''
      set:
        - parameter-identifier
        - parameter-variadic
        - lambda-parameter-type

  lambda-parameter-type:
    - match: final\b
      scope: storage.modifier.java
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      set: array-modifier
    - match: '{{storage_modifiers}}\b'
      scope: invalid.illegal.unexpected-keyword.java
    - match: var\b
      scope: storage.type.var.java
      set: array-modifier
    - include: object-type

  lambda-meta:
    - meta_content_scope: meta.function.anonymous.java
    - include: else-pop

  parens-common:
    - meta_scope: meta.parens.java
    - include: parens-end
    - include: parens-body

  parens-body:
    - include: illegal-parens-terminators
    - include: expressions

  parens-begin:
    - match: \(
      scope: punctuation.section.parens.begin.java
      pop: 1

  parens-end:
    - match: \)
      scope: punctuation.section.parens.end.java
      pop: 1

  method-call-arguments:
    - meta_scope: meta.function-call.arguments.java meta.parens.java
    - include: parens-common

###[ PARAMETERS ]##############################################################

  parameters-list:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.4.1
    - match: \,
      scope: punctuation.separator.comma.java
      push:
        - parameter-identifier
        - parameter-variadic
        - parameter-type

  parameter-type:
    - match: final\b
      scope: storage.modifier.java
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      set: array-modifier
    - match: '{{storage_modifiers}}\b'
      scope: invalid.illegal.unexpected-keyword.java
    - match: var\b
      scope: invalid.illegal.unexpected-keyword.java
      set: array-modifier
    - include: object-type

  parameter-variadic:
    - match: \.\.\.
      scope: keyword.operator.variadic.java
      pop: 1
    - include: annotation
    - include: else-pop

  parameter-identifier:
    - match: '{{variables}}\b'
      scope: invalid.illegal.identifier.java
      set: [illegal-members, array-modifier]
    - match: '{{id}}'
      scope: variable.parameter.java
      set: [illegal-members, array-modifier]
    - include: else-pop

  parameter-maybe-receiver:
    - match: this\b
      scope: variable.parameter.this.java
      set: [illegal-members, illegal-array-modifier]
    - match: '{{id}}'
      branch_point: parameter-maybe-receiver
      branch:
        - parameter-receiver-identifier
        - parameter-normal-identifier
    - include: else-pop

  parameter-receiver-identifier:
    - meta_scope: meta.path.java support.class.java
    - match: ''
      push:
        - parameter-receiver-name
        - parameter-receiver-accessor
        - illegal-array-modifier

  parameter-receiver-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: parameter-maybe-receiver

  parameter-receiver-name:
    - clear_scopes: 1
    - match: this\b
      scope: variable.parameter.this.java
      set:
        - parameter-receiver-end
        - illegal-members
        - illegal-array-modifier
    - match: '{{id}}'
      scope: invalid.illegal.identifier.java
      set:
        - parameter-receiver-end
        - illegal-members
        - illegal-array-modifier
    - include: else-pop2

  parameter-receiver-end:
    - clear_scopes: 2
    - include: immediately-pop2

  parameter-normal-identifier:
    - meta_scope: variable.parameter.java
    - match: ''
      set: [immediately-pop2, illegal-members, array-modifier]

###[ VARIABLES ]###############################################################

  variables:
    - match: _\b
      scope: variable.language.blank.java
    - match: '{{variables}}\b'
      scope: variable.language.java
    - match: '{{id}}'
      branch_point: variables-type
      branch:
        - variable-maybe-method-name
        - variable-maybe-lambda-parameter
        - variable-other

  variables-branch-success:
    - clear_scopes: 2
    - match: ''
      pop: 2

  variable-maybe-method-name:
    - meta_scope:
        meta.function-call.identifier.java
        variable.function.java
    - match: ''
      push:
        - clear_scopes: 2
        - meta_scope: meta.function-call.identifier.java
        - match: (?=\()
          set: [variables-branch-success, method-call-arguments, parens-begin]
        - match: (?=\S)
          fail: variables-type

  variable-maybe-lambda-parameter:
    - meta_scope:
        meta.function.anonymous.parameters.java
        variable.parameter.java
    - match: ''
      push:
        - clear_scopes: 2
        - meta_content_scope: meta.function.anonymous.java
        - match: (?=->)
          pop: 2
        - match: (?=\S)
          fail: variables-type

  variable-other:
    - meta_scope:
        meta.variable.identifier.java
        variable.other.readwrite.java
    - match: ''
      set: variable-maybe-item-access

  variable-maybe-item-access:
    - meta_content_scope: meta.variable.item-access.java
    - match: \[
      scope: punctuation.section.brackets.begin.java
      push:
        - meta_scope: meta.brackets.java
        - match: \]
          scope: punctuation.section.brackets.end.java
          pop: 1
        - include: illegal-parens-terminators
        - include: expressions
    - match: (?!\s*\[)
      pop: 1

  variable-namespace:
    - match: '{{lowercase_id}}'
      scope: variable.namespace.java
    - include: punctuation-accessor-dot

  variable-language-class:
    - match: class\b
      scope: variable.language.class.java
      pop: 1

  variable-maybe-function-reference:
    - match: new\b
      scope: keyword.other.storage.new.java
      pop: 1
    - match: '{{id}}'
      scope: variable.function.reference.java
      pop: 1
    - include: else-pop

###[ CONSTANTS ]###############################################################

  constants:
    - match: (?:false|true)\b
      scope: constant.language.boolean.java
    - match: null\b
      scope: constant.language.null.java

  numbers:
    # hexadecimal floats
    - match: |-
        (?x)
        (0[xX])
        (?:
          # 0x1., 0x1.1, 0x1.1p1, 0x1.1p-1, 0x1.p1, 0x1.p-1 | 0x1p1
          ({{hex_digit}}*) (?: ((\.) {{hex_digit}}*) ({{hex_exponent}})? | ({{hex_exponent}}) )
          # 0x.1, 0x.1p1, 0x.1p-1
          | ((\.) {{hex_digit}}+) ({{hex_exponent}})?
        )
      captures:
        1: meta.number.base.java constant.numeric.float.hexadecimal.java
        2: meta.number.value.mantissa.java constant.numeric.float.hexadecimal.java
        3: meta.number.value.mantissa.java constant.numeric.float.hexadecimal.java
        4: punctuation.separator.decimal.java
        5: meta.number.value.exponent.java constant.numeric.float.hexadecimal.java
        6: meta.number.value.exponent.java constant.numeric.float.hexadecimal.java
        7: meta.number.value.mantissa.java constant.numeric.float.hexadecimal.java
        8: punctuation.separator.decimal.java
        9: meta.number.value.exponent.java constant.numeric.float.hexadecimal.java
    # decimal floats
    - match: |-
        (?x)
        ([0-9]{{dec_digit}}*)
        (?:
          # 1., 1.1, 1.1e1, 1.1e-1, 1.e1, 1.e-1, 1.d, 1.1d, 1.1e1d, 1.1e-1d, 1.e1d, 1.e-1d
          ((\.) {{dec_digit}}*) ({{dec_exponent}})? ([dDfF]\b)?
          # 1e1 1e1d
          | ({{dec_exponent}}) ([dDfF]\b)?
          # 1d
          | ([dDfF]\b)
        )
        | ((\.) {{dec_digit}}+) ({{dec_exponent}})? ([dDfF]\b)?
      captures:
        1: meta.number.value.mantissa.java constant.numeric.float.decimal.java
        2: meta.number.value.mantissa.java constant.numeric.float.decimal.java
        3: punctuation.separator.decimal.java
        4: meta.number.value.exponent.java constant.numeric.float.decimal.java
        5: meta.number.type.java constant.numeric.float.decimal.java
        6: meta.number.value.exponent.java constant.numeric.float.decimal.java
        7: meta.number.type.java constant.numeric.float.decimal.java
        8: meta.number.type.java constant.numeric.float.decimal.java
        9: meta.number.value.mantissa.java constant.numeric.float.decimal.java
        10: punctuation.separator.decimal.java
        11: meta.number.value.exponent.java constant.numeric.float.decimal.java
        12: meta.number.type.java constant.numeric.float.decimal.java
    # binary integers
    - match: (0[bB])({{bin_digit}}*)([lL]\b)?
      captures:
        1: meta.number.base.java constant.numeric.integer.binary.java
        2: meta.number.value.java constant.numeric.integer.binary.java
        3: meta.number.type.java constant.numeric.integer.binary.java
    # hexadecimal integers
    - match: (0[xX])({{hex_digit}}*)([lL]\b)?
      captures:
        1: meta.number.base.java constant.numeric.integer.hexadecimal.java
        2: meta.number.value.java constant.numeric.integer.hexadecimal.java
        3: meta.number.type.java constant.numeric.integer.hexadecimal.java
    # octal integers
    - match: (0)({{oct_digit}}+)([lL]\b|(?![\d_]))
      captures:
        1: meta.number.base.java constant.numeric.integer.octal.java
        2: meta.number.value.java constant.numeric.integer.octal.java
        3: meta.number.type.java constant.numeric.integer.octal.java
    # decimal integers
    - match: ((0_*)?[1-9]{{dec_digit}}*|0(?![\d_]))([lL]\b)?
      captures:
        1: meta.number.value.java constant.numeric.integer.decimal.java
        2: invalid.illegal.numeric.java
        3: meta.number.type.java constant.numeric.integer.decimal.java

  strings:
    # https://docs.oracle.com/en/java/javase/13/text_blocks/index.html
    - match: (\"{3})(.*)$
      captures:
        1: punctuation.definition.string.begin.java
        2: invalid.illegal.unexpected-content.java
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.triple.java
        - match: \"{3}
          scope: punctuation.definition.string.end.java
          pop: 1
        - include: string-escapes
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.5
    - match: \"
      scope: punctuation.definition.string.begin.java
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.java
        - match: \"
          scope: punctuation.definition.string.end.java
          pop: 1
        - include: illegal-newline
        - include: string-escapes
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.4
    - match: \'
      scope: punctuation.definition.string.begin.java
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.java
        - match: \'
          scope: punctuation.definition.string.end.java
          pop: 1
        - include: illegal-newline
        - include: string-escapes

  string-escapes:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.3
    - match: \\u+\h{4}
      scope: constant.character.escape.unicode.java
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.6
    - match: \\[0-3]?[0-7]{1,2}
      scope: constant.character.escape.octal.java
    - match: \\[btnfr"'\\]
      scope: constant.character.escape.java
    - match: \\.
      scope: invalid.illegal.escape.java

###[ OPERATORS ]###############################################################

  operators:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.12
    - match: (<<|>>>?|[-+*/%|&\^])=
      scope: keyword.operator.assignment.augmented.java
      push: expression-pop
    - match: '<<|>>>?'
      scope: keyword.operator.bitwise.java
    - match: '==|!=|<=|>=|<>|<|>'
      scope: keyword.operator.comparison.java
    - match: '='
      scope: keyword.operator.assignment.java
      push: expression-pop
    - match: '\+\+?|\-\-?|[*/%]'
      scope: keyword.operator.arithmetic.java
    - match: '!|&&|\|\|'
      scope: keyword.operator.logical.java
    - match: '[~|&\^]'
      scope: keyword.operator.bitwise.java
    - match: '\?'
      scope: keyword.operator.ternary.java
      push:
        - include: operator-ternary-colon
        - include: expression-pop
    - match: instanceof\b
      scope: keyword.other.storage.instanceof.java

  operator-ternary-colon:
    - match: ':'
      scope: keyword.operator.ternary.java
      pop: 1

###[ PUNCTUATIONS ]############################################################

  punctuations:
    - match: '::'
      scope: punctuation.accessor.double-colon.java
      push:
        - variable-maybe-function-reference
        - generic-type-arguments
    - match: '{{accessor_dot}}'
      scope: punctuation.accessor.dot.java
      push:
        - include: variable-language-class
        - include: generic-type-arguments
    - include: punctuation-separator-comma

  punctuation-accessor-dot:
    - match: '{{accessor_dot}}'
      scope: punctuation.accessor.dot.java

  punctuation-accessor-dot-pop:
    - match: '{{accessor_dot}}'
      scope: punctuation.accessor.dot.java
      pop: 1

  punctuation-accessor-dot-pop2:
    - match: '{{accessor_dot}}'
      scope: punctuation.accessor.dot.java
      pop: 2

  punctuation-separator-comma:
    - match: \,
      scope: punctuation.separator.comma.java

  punctuation-terminator-semicolon:
    - match: ;
      scope: punctuation.terminator.java

  punctuation-terminator-semicolon-pop:
    - match: ;
      scope: punctuation.terminator.java
      pop: 1

###[ ENUM CONSTANT ]###########################################################

  enum-constant:
    - match: '{{id}}'
      branch_point: enum-constant-identifier
      branch:
        - enum-constant-qualified-identifier
        - enum-constant-unqualified-identifier

  enum-constant-qualified-identifier:
    - meta_scope: meta.path.java variable.namespace.java
    - match: ''
      push:
        - enum-constant-path
        - enum-constant-path-accessor

  enum-constant-path-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: enum-constant-identifier

  enum-constant-path:
    - clear_scopes: 1
    - include: reserved-pop3
    - match: '{{id}}'
      branch_point: enum-constant-qualified-identifier
      branch:
        - enum-constant-qualifier
        - enum-constant-name
    - include: else-pop3

  enum-constant-qualifier:
    - meta_scope: variable.namespace.java
    - match: ''
      push:
        - clear_scopes: 1
        - include: punctuation-accessor-dot-pop2
        - match: (?=\S)
          fail: enum-constant-qualified-identifier

  enum-constant-name:
    - meta_scope: constant.other.java
    - include: immediately-pop4

  enum-constant-unqualified-identifier:
    - meta_scope: constant.other.java
    - include: immediately-pop2

###[ ENTITY CLASS ]############################################################

  entity-class:
    - match: '{{id}}'
      branch_point: entity-class-identifier
      branch:
        - entity-class-qualified-identifier
        - entity-class-unqualified-identifier

  entity-class-qualified-identifier:
    - meta_scope: meta.path.java variable.namespace.java
    - match: ''
      push:
        - entity-class-path
        - entity-class-path-accessor
        - generic-type-arguments

  entity-class-path-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: entity-class-identifier

  entity-class-path:
    - clear_scopes: 1
    - include: reserved-pop2
    - match: '{{id}}'
      branch_point: entity-class-qualified-identifier
      branch:
        - entity-class-qualifier
        - entity-class-name
    - include: else-pop2

  entity-class-qualifier:
    - meta_scope: variable.namespace.java
    - match: ''
      push:
        - entity-class-qualifier-accessor
        - generic-type-arguments

  entity-class-qualifier-accessor:
    - clear_scopes: 1
    - include: punctuation-accessor-dot-pop2
    - match: (?=\S)
      fail: entity-class-qualified-identifier

  entity-class-name:
    - meta_scope: entity.name.class.java
    - match: ''
      set:
        - immediately-pop3
        - generic-type-arguments

  entity-class-unqualified-identifier:
    - meta_scope: entity.name.class.java
    - match: ''
      set: generic-type-arguments

###[ ENTITY MODULE ]###########################################################

  entity-module:
    - match: '{{id}}'
      branch_point: entity-module-identifier
      branch:
        - entity-module-qualified-identifier
        - entity-module-unqualified-identifier

  entity-module-qualified-identifier:
    - meta_scope: meta.path.java variable.namespace.java
    - match: ''
      push:
        - entity-module-path
        - entity-module-path-accessor

  entity-module-path-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: entity-module-identifier

  entity-module-path:
    - clear_scopes: 1
    - include: reserved-pop2
    - match: '{{id}}'
      branch_point: entity-module-qualified-identifier
      branch:
        - entity-module-qualifier
        - entity-module-name
    - include: else-pop2

  entity-module-qualifier:
    - meta_scope: variable.namespace.java
    - match: ''
      push:
        - clear_scopes: 1
        - include: punctuation-accessor-dot-pop2
        - match: (?=\S)
          fail: entity-module-qualified-identifier

  entity-module-name:
    - meta_scope: entity.name.namespace.module.java
    - include: immediately-pop3

  entity-module-unqualified-identifier:
    - meta_scope: entity.name.namespace.module.java
    - include: immediately-pop

###[ ENTITY PACKAGE ]##########################################################

  entity-package:
    - match: '{{id}}'
      branch_point: entity-package-identifier
      branch:
        - entity-package-qualified-identifier
        - entity-package-unqualified-identifier

  entity-package-qualified-identifier:
    - meta_scope: meta.path.java variable.namespace.java
    - match: ''
      push:
        - entity-package-path
        - entity-package-path-accessor

  entity-package-path-accessor:
    - include: punctuation-accessor-dot-pop
    - match: (?=\S)
      fail: entity-package-identifier

  entity-package-path:
    - clear_scopes: 1
    - include: reserved-pop2
    - match: '{{id}}'
      branch_point: entity-package-qualified-identifier
      branch:
        - entity-package-qualifier
        - entity-package-name
    - include: else-pop2

  entity-package-qualifier:
    - meta_scope: variable.namespace.java
    - match: ''
      push:
        - clear_scopes: 1
        - include: punctuation-accessor-dot-pop2
        - match: (?=\S)
          fail: entity-package-qualified-identifier

  entity-package-name:
    - meta_scope: entity.name.namespace.package.java
    - include: immediately-pop3

  entity-package-unqualified-identifier:
    - meta_scope: entity.name.namespace.package.java
    - include: immediately-pop

###[ OBJECT TYPES ]############################################################

  # Stand-along uppercase id, either type or constant.
  # Should be used only inside blocks.
  uppercase-identifiers:
    # Popular JDK classes
    - match: (?:UUID|UR[LI])\b
      scope: support.class.java
      push:
        - object-type-child
        - array-modifier
        - generic-type-arguments
    # Generic type variable
    - match: \p{Lu}\b
      scope: support.class.java
      push:
        - object-type-child
        - array-modifier
        - generic-type-arguments
    # Uppercase constants
    - match: '{{uppercase_id}}'
      scope: constant.other.java

  # Stand-alone type, maybe type of the variable or class object reference.
  # Should be used only inside blocks.
  object-types:
    # Here the match is more complex than 'before_fqn'.
    # In blocks we can't simply distinguish package from variable.
    - match: (?=(?:{{lowercase_id}}\.)+\p{Lu})
      push:
        - meta_scope: meta.path.java
        - include: variable-namespace
        - include: object-types-no-fqn
    - match: '{{classcase_id}}\b'
      scope: support.class.java
      push:
        - object-types-child
        - array-modifier
        - generic-type-arguments

  object-types-no-fqn:
    - match: '{{classcase_id}}\b'
      scope: support.class.java
      set:
        - object-types-child
        - array-modifier
        - generic-type-arguments
    - include: annotation
    - include: else-pop

  object-types-child:
    - match: '{{accessor_dot}}'
      scope: punctuation.accessor.dot.java
      set:
        - include: variable-language-class
        - match: '{{uppercase_id}}'
          scope: constant.other.java
          pop: 1
        - include: object-types-no-fqn
    - include: else-pop

###[ OBJECT TYPE ]#############################################################

  object-type:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-4.html#jls-4.3
    - match: '{{before_fqn}}'
      set: object-type-fqn
    - include: object-type-no-fqn

  object-type-fqn:
    - meta_scope: meta.path.java
    - include: variable-namespace
    - include: object-type-no-fqn

  object-type-no-fqn:
    - match: '{{classcase_id}}\b'
      scope: support.class.java
      set:
        - object-type-child
        - array-modifier
        - generic-type-arguments
    - include: annotation
    - include: else-pop

  object-type-child:
    - match: '{{accessor_dot}}'
      scope: punctuation.accessor.dot.java
      set: object-type-no-fqn
    - include: else-pop

###[ OBJECT TYPE REFERENCES ]##################################################

  # Used in 'throws' and generic bounds
  object-type-references:
    - match: \,
      scope: punctuation.separator.comma.java
      push: object-type-reference

  object-type-reference:
    - match: '{{before_fqn}}'
      set:
        - meta_scope: meta.path.java
        - include: variable-namespace
        - include: object-type-reference-no-fqn
    - include: object-type-reference-no-fqn

  object-type-reference-no-fqn:
    - match: '{{classcase_id}}'
      scope: support.class.java
      set:
        - object-type-reference-child
        - illegal-array-modifier
        - generic-type-arguments
    - match: '{{storage_types}}'
      scope: invalid.illegal.unexpected-keyword.java
      set:
        - object-type-reference-child
        - illegal-array-modifier
        - generic-type-arguments
    - include: annotation
    - include: else-pop

  object-type-reference-child:
    - match: '{{accessor_dot}}'
      scope: punctuation.accessor.dot.java
      set: object-type-reference-no-fqn
    - include: else-pop

###[ INHERRITED TYPE REFERENCES ]##############################################

  # Used in class-level 'extends' and 'implements'
  inherited-object-type-references:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.4
    - match: \,
      scope: punctuation.separator.comma.java
      push: inherited-object-type-reference

  inherited-object-type-reference:
    - match: '{{before_fqn}}'
      set:
        - meta_scope: meta.path.java
        - include: variable-namespace
        - include: inherited-object-type-reference-no-fqn
    - include: inherited-object-type-reference-no-fqn

  inherited-object-type-reference-no-fqn:
    - include: reserved-pop
    - match: '{{id}}'
      scope: entity.other.inherited-class.java
      set:
        - inherrited-object-type-reference-child
        - illegal-array-modifier
        - generic-type-arguments
    - include: annotation
    - include: else-pop

  inherrited-object-type-reference-child:
    - match: '{{accessor_dot}}'
      scope: punctuation.accessor.dot.java
      set: inherited-object-type-reference-no-fqn
    - include: else-pop

###[ GENERIC TYPES ]###########################################################

  generic-type-arguments:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-4.html#jls-4.5.1
    - match: <
      scope: punctuation.definition.generic.begin.java
      set: [generic-type-arguments-common, generic-type-argument]
    - include: else-pop

  generic-type-arguments-common:
    - meta_scope: meta.generic.java
    - match: \,
      scope: punctuation.separator.comma.java
      push: generic-type-argument
    - include: generic-type-terminator

  generic-type-argument:
    - match: \?
      scope: keyword.operator.wildcard.java
      set: generic-type-arguments-bounds
    - match: '{{storage_types}}\b'
      branch_point: primitive-array-type
      branch:
        - - meta_scope: storage.type.primitive.java
          - match: ''
            push:
              - clear_scopes: 1
              - match: (?=\[)
                push:
                  - include: array-modifier-body
                  - include: else-pop4
              - include: annotation
              - match: (?=\S)
                fail: primitive-array-type
        - - meta_scope: invalid.illegal.unexpected-keyword.java
          - include: immediately-pop2
    - include: object-type

  generic-type-arguments-bounds:
    - match: extends\b
      scope: keyword.declaration.extends.java
      set: [generic-type-additional-bounds, object-type-reference]
    - match: super\b
      scope: keyword.declaration.super.java
      set: object-type-reference
    - include: else-pop

  generic-type:
    - match: <
      scope: punctuation.definition.generic.begin.java
      push:
        - generic-type-parameters-common
        - generic-type-parameter

  generic-type-parameters:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.2
    - match: <
      scope: punctuation.definition.generic.begin.java
      set: [generic-type-parameters-common, generic-type-parameter]
    - include: else-pop

  generic-type-parameters-common:
    - meta_scope: meta.generic.declaration.java
    - match: \,
      scope: punctuation.separator.comma.java
      push: generic-type-parameter
    - include: generic-type-terminator

  generic-type-parameter:
    # https://docs.oracle.com/javase/specs/jls/se13/html/jls-4.html#jls-4.4
    - match: \?|{{storage_types}}\b
      scope: invalid.illegal.unexpected-keyword.java
      set: generic-type-parameter-bounds
    - include: reserved-pop
    - match: '{{id}}'
      scope: variable.parameter.type.java
      set: generic-type-parameter-bounds
    - include: annotation
    - include: else-pop

  generic-type-parameter-bounds:
    - match: extends\b
      scope: keyword.declaration.extends.java
      set: [generic-type-additional-bounds, object-type-reference]
    - match: super\b
      scope: invalid.illegal.unexpected-keyword.java
      set: object-type-reference
    - include: else-pop

  generic-type-additional-bounds:
    - match: '&'
      scope: keyword.operator.multiple-bounds.java
      push: object-type-reference
    - include: else-pop

  generic-type-terminator:
    - match: '>'
      scope: punctuation.definition.generic.end.java
      pop: 1
    - match: extends\b
      scope: invalid.illegal.unexpected-keyword.java
      push: [generic-type-additional-bounds, object-type-reference]
    - match: super\b
      scope: invalid.illegal.unexpected-keyword.java
      push: object-type-reference
    - include: annotation
    - include: else-pop

###[ PRIMITIVE TYPES ]#########################################################

  primitive-types:
    - match: '{{storage_types}}\b'
      scope: storage.type.primitive.java
      push: array-modifier

  array-modifier:
    - include: array-modifier-body
    - include: else-pop

  array-modifier-body:
    - match: \[\s*\]
      scope: storage.modifier.array.java
    - include: annotation

  storage-modifiers:
    - match: '{{storage_modifiers}}\b'
      scope: storage.modifier.java

###[ PROTOTYPES ]##############################################################

  prototype:
    - match: (?=%>)
      pop: 1
    - include: comments
    - include: illegal-keywords

  else-pop:
    - match: (?=\S)
      pop: 1

  else-pop2:
    - match: (?=\S)
      pop: 2

  else-pop3:
    - match: (?=\S)
      pop: 3

  else-pop4:
    - match: (?=\S)
      pop: 4

  immediately-pop:
    - match: ''
      pop: 1

  immediately-pop2:
    - match: ''
      pop: 2

  immediately-pop3:
    - match: ''
      pop: 3

  immediately-pop4:
    - match: ''
      pop: 4

  reserved-pop:
    - match: (?={{reserved_words}}\b)
      pop: 1

  reserved-pop2:
    - match: (?={{reserved_words}}\b)
      pop: 2

  reserved-pop3:
    - match: (?={{reserved_words}}\b)
      pop: 3

  else-expression-pop:
    - match: (?=\S)
      set: expression-pop

  expression-pop:
    - include: expression-terminator
    - include: expressions

  expression-terminator:
    - match: |-
        (?x)(?=
          [,:;)\]{}] |
          ( {{control_keywords}}
          | {{declaration_keywords}}
          | {{storage_modifiers}}
          | {{storage_types}}
          )\b
        )
      pop: 1

  expect-expression-terminator:
    - include: expression-terminator
    - match: \S
      scope: invalid.illegal.expect-terminator.java

###[ ILLEGALS ]################################################################

  illegal-array-modifier:
    - match: \[\s*\]
      scope: invalid.illegal.unexpected-modifier.java
    - include: annotation
    - include: else-pop

  illegal-keywords:
    - match: '{{illegal_keywords}}\b'
      scope: invalid.illegal.keyword.java

  illegal-members:
    - match: '{{accessor_dot}}'
      scope: invalid.illegal.unexpected-accessor.java
      push:
        - illegal-array-modifier
        - illegal-member
    - include: else-pop

  illegal-member:
    - match: '{{id}}'
      scope: invalid.illegal.unexpected-member.java
      pop: 1
    - include: else-pop

  illegal-newline:
    - match: \n
      scope: invalid.illegal.unexpected-newline.java
      pop: 1

  illegal-open-block:
    - match: \s?(?={)
      scope: invalid.illegal.stray-terminator-end
      pop: 1

  illegal-semicolon:
    - match: ;
      scope: invalid.illegal.stray-terminator-end
      pop: 1

  illegal-parens-terminators:
    # Pops the stack if anything matches
    - include: illegal-semicolon
    - include: illegal-open-block

  illegal-type-parameters:
    - match: \<
      set:
        - meta_scope: invalid.illegal.unexpected-type-parameters.java
        - match: \>
          pop: 1
    - include: else-pop

  stray-braces:
    - match: \}
      scope: invalid.illegal.stray-brace-end

  stray-parens:
    - match: \)
      scope: invalid.illegal.stray-parens-end
